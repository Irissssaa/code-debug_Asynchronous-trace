{
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-channel-0.3.31/src/mpsc/mod.rs:616": {
    "fn_name": "static fn futures_channel::mpsc::BoundedSenderInner<core::result::Result<bytes::bytes::Bytes, hyper::error::Error>>::poll_ready<core::result::Result<bytes::bytes::Bytes, hyper::error::Error>>(*mut futures_channel::mpsc::BoundedSenderInner<core::result::Result<bytes::bytes::Bytes, hyper::error::Error>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), futures_channel::mpsc::SendError>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-channel-0.3.31/src/mpsc/mod.rs:657": {
    "fn_name": "static fn futures_channel::mpsc::BoundedSenderInner<core::result::Result<bytes::bytes::Bytes, hyper::error::Error>>::poll_unparked<core::result::Result<bytes::bytes::Bytes, hyper::error::Error>>(*mut futures_channel::mpsc::BoundedSenderInner<core::result::Result<bytes::bytes::Bytes, hyper::error::Error>>, core::option::Option<&mut core::task::wake::Context>)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-channel-0.3.31/src/mpsc/mod.rs:1007": {
    "fn_name": "static fn futures_channel::mpsc::Receiver<core::result::Result<bytes::bytes::Bytes, hyper::error::Error>>::next_message<core::result::Result<bytes::bytes::Bytes, hyper::error::Error>>(*mut futures_channel::mpsc::Receiver<core::result::Result<bytes::bytes::Bytes, hyper::error::Error>>)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<bytes::bytes::Bytes, hyper::error::Error>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-channel-0.3.31/src/mpsc/mod.rs:716": {
    "fn_name": "static fn futures_channel::mpsc::Sender<core::result::Result<bytes::bytes::Bytes, hyper::error::Error>>::poll_ready<core::result::Result<bytes::bytes::Bytes, hyper::error::Error>>(*mut futures_channel::mpsc::Sender<core::result::Result<bytes::bytes::Bytes, hyper::error::Error>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), futures_channel::mpsc::SendError>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-channel-0.3.31/src/mpsc/mod.rs:1076": {
    "fn_name": "static fn futures_channel::mpsc::{impl#30}::poll_next<core::result::Result<bytes::bytes::Bytes, hyper::error::Error>>(core::pin::Pin<&mut futures_channel::mpsc::Receiver<core::result::Result<bytes::bytes::Bytes, hyper::error::Error>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<bytes::bytes::Bytes, hyper::error::Error>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-channel-0.3.31/src/oneshot.rs:256": {
    "fn_name": "static fn futures_channel::oneshot::Inner<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>>::recv<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>>(*mut futures_channel::oneshot::Inner<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, futures_channel::oneshot::Canceled>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-channel-0.3.31/src/oneshot.rs:458": {
    "fn_name": "static fn futures_channel::oneshot::{impl#10}::poll<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>>(core::pin::Pin<&mut futures_channel::oneshot::Receiver<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, futures_channel::oneshot::Canceled>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-core-0.3.31/src/future.rs:91": {
    "fn_name": "static fn futures_core::future::{impl#2}::try_poll<tower::timeout::future::ResponseFuture<core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output=core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>> + core::marker::Send), alloc::alloc::Global>>>, reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>(core::pin::Pin<&mut tower::timeout::future::ResponseFuture<core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output=core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>> + core::marker::Send), alloc::alloc::Global>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": true
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/future/either.rs:106": {
    "fn_name": "static fn futures_util::future::either::{impl#4}::poll<hyper::proto::h2::client::Conn<reqwest::connect::sealed::Conn, reqwest::async_impl::body::Body>, h2::client::Connection<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>(core::pin::Pin<&mut futures_util::future::either::Either<hyper::proto::h2::client::Conn<reqwest::connect::sealed::Conn, reqwest::async_impl::body::Body>, h2::client::Connection<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), h2::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/future/future/map.rs:52": {
    "fn_name": "static fn futures_util::future::future::map::{impl#2}::poll<hyper_util::common::future::PollFn<hyper_util::client::legacy::client::{impl#1}::try_send_request::{async_fn#0}::{closure_env#1}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, hyper_util::client::legacy::client::{impl#1}::try_send_request::{async_fn#0}::{closure_env#2}<reqwest::connect::Connector, reqwest::async_impl::body::Body>, ()>(core::pin::Pin<&mut futures_util::future::future::map::Map<hyper_util::common::future::PollFn<hyper_util::client::legacy::client::{impl#1}::try_send_request::{async_fn#0}::{closure_env#1}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, hyper_util::client::legacy::client::{impl#1}::try_send_request::{async_fn#0}::{closure_env#2}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/future/future/mod.rs:554": {
    "fn_name": "static fn futures_util::future::future::FutureExt::poll_unpin<hyper_util::common::lazy::Lazy<hyper_util::client::legacy::client::{impl#1}::connect_to::{closure_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>, futures_util::future::either::Either<futures_util::future::try_future::AndThen<futures_util::future::try_future::MapErr<hyper_util::service::oneshot::Oneshot<reqwest::connect::Connector, http::uri::Uri>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, futures_util::future::either::Either<core::pin::Pin<alloc::boxed::Box<hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure#1}::{async_block_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>, alloc::alloc::Global>>, futures_util::future::ready::Ready<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#1}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, futures_util::future::ready::Ready<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>>>>(*mut hyper_util::common::lazy::Lazy<hyper_util::client::legacy::client::{impl#1}::connect_to::{closure_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>, futures_util::future::either::Either<futures_util::future::try_future::AndThen<futures_util::future::try_future::MapErr<hyper_util::service::oneshot::Oneshot<reqwest::connect::Connector, http::uri::Uri>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, futures_util::future::either::Either<core::pin::Pin<alloc::boxed::Box<hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure#1}::{async_block_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>, alloc::alloc::Global>>, futures_util::future::ready::Ready<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#1}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, futures_util::future::ready::Ready<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/future/poll_fn.rs:55": {
    "fn_name": "static fn futures_util::future::poll_fn::{impl#2}::poll<core::result::Result<(), hyper::error::Error>, hyper::client::conn::http2::{impl#1}::ready::{async_fn#0}::{closure_env#0}<reqwest::async_impl::body::Body>>(core::pin::Pin<&mut futures_util::future::poll_fn::PollFn<hyper::client::conn::http2::{impl#1}::ready::{async_fn#0}::{closure_env#0}<reqwest::async_impl::body::Body>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/future/ready.rs:31": {
    "fn_name": "static fn futures_util::future::ready::{impl#3}::poll<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>(core::pin::Pin<&mut futures_util::future::ready::Ready<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/future/select.rs:101": {
    "fn_name": "static fn futures_util::future::select::{impl#1}::poll<hyper_util::client::legacy::pool::Checkout<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::common::lazy::Lazy<hyper_util::client::legacy::client::{impl#1}::connect_to::{closure_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>, futures_util::future::either::Either<futures_util::future::try_future::AndThen<futures_util::future::try_future::MapErr<hyper_util::service::oneshot::Oneshot<reqwest::connect::Connector, http::uri::Uri>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, futures_util::future::either::Either<core::pin::Pin<alloc::boxed::Box<hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure#1}::{async_block_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>, alloc::alloc::Global>>, futures_util::future::ready::Ready<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#1}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, futures_util::future::ready::Ready<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>>>>(core::pin::Pin<&mut futures_util::future::select::Select<hyper_util::client::legacy::pool::Checkout<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::common::lazy::Lazy<hyper_util::client::legacy::client::{impl#1}::connect_to::{closure_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>, futures_util::future::either::Either<futures_util::future::try_future::AndThen<futures_util::future::try_future::MapErr<hyper_util::service::oneshot::Oneshot<reqwest::connect::Connector, http::uri::Uri>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, futures_util::future::either::Either<core::pin::Pin<alloc::boxed::Box<hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure#1}::{async_block_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>, alloc::alloc::Global>>, futures_util::future::ready::Ready<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#1}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, futures_util::future::ready::Ready<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<futures_util::future::either::Either<(core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::pool::Error>, hyper_util::common::lazy::Lazy<hyper_util::client::legacy::client::{impl#1}::connect_to::{closure_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>, futures_util::future::either::Either<futures_util::future::try_future::AndThen<futures_util::future::try_future::MapErr<hyper_util::service::oneshot::Oneshot<reqwest::connect::Connector, http::uri::Uri>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, futures_util::future::either::Either<core::pin::Pin<alloc::boxed::Box<hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure#1}::{async_block_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>, alloc::alloc::Global>>, futures_util::future::ready::Ready<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#1}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, futures_util::future::ready::Ready<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>>>), (core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>, hyper_util::client::legacy::pool::Checkout<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>)>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/future/try_future/into_future.rs:33": {
    "fn_name": "static fn futures_util::future::try_future::into_future::{impl#2}::poll<tower::timeout::future::ResponseFuture<core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output=core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>> + core::marker::Send), alloc::alloc::Global>>>>(core::pin::Pin<&mut futures_util::future::try_future::into_future::IntoFuture<tower::timeout::future::ResponseFuture<core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output=core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>> + core::marker::Send), alloc::alloc::Global>>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/future/try_future/try_flatten.rs:46": {
    "fn_name": "static fn futures_util::future::try_future::try_flatten::{impl#2}::poll<futures_util::future::try_future::MapOk<futures_util::future::try_future::MapErr<hyper_util::service::oneshot::Oneshot<reqwest::connect::Connector, http::uri::Uri>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#1}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>>(core::pin::Pin<&mut futures_util::future::try_future::try_flatten::TryFlatten<futures_util::future::try_future::MapOk<futures_util::future::try_future::MapErr<hyper_util::service::oneshot::Oneshot<reqwest::connect::Connector, http::uri::Uri>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#1}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, futures_util::future::either::Either<core::pin::Pin<alloc::boxed::Box<hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure#1}::{async_block_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>, alloc::alloc::Global>>, futures_util::future::ready::Ready<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/lib.rs:82": {
    "fn_name": "static fn futures_util::future::try_future::{impl#54}::poll<tower::timeout::future::ResponseFuture<core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output=core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>> + core::marker::Send), alloc::alloc::Global>>>, reqwest::connect::{impl#1}::build::{closure_env#1}>(core::pin::Pin<&mut futures_util::future::try_future::MapErr<tower::timeout::future::ResponseFuture<core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output=core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>> + core::marker::Send), alloc::alloc::Global>>>, reqwest::connect::{impl#1}::build::{closure_env#1}>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/stream/stream/into_future.rs:82": {
    "fn_name": "static fn futures_util::stream::stream::into_future::{impl#2}::poll<futures_channel::mpsc::Receiver<core::convert::Infallible>>(core::pin::Pin<&mut futures_util::stream::stream::into_future::StreamFuture<futures_channel::mpsc::Receiver<core::convert::Infallible>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<(core::option::Option<core::convert::Infallible>, futures_channel::mpsc::Receiver<core::convert::Infallible>)>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/futures-util-0.3.31/src/stream/stream/mod.rs:1634": {
    "fn_name": "static fn futures_util::stream::stream::StreamExt::poll_next_unpin<futures_channel::mpsc::Receiver<core::convert::Infallible>>(*mut futures_channel::mpsc::Receiver<core::convert::Infallible>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::convert::Infallible>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/client.rs:367": {
    "fn_name": "static fn h2::client::SendRequest<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>::poll_ready<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut h2::client::SendRequest<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), h2::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/client.rs:1289": {
    "fn_name": "static fn h2::client::bind_connection::{async_fn#0}<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), h2::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/client.rs:1308": {
    "fn_name": "static fn h2::client::{impl#6}::handshake2::{async_fn#0}<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(h2::client::SendRequest<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>, h2::client::Connection<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>), h2::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/client.rs:1438": {
    "fn_name": "static fn h2::client::{impl#7}::poll<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(core::pin::Pin<&mut h2::client::Connection<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), h2::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/codec/framed_read.rs:378": {
    "fn_name": "static fn h2::codec::framed_read::{impl#1}::poll_next<h2::codec::framed_write::FramedWrite<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>>(core::pin::Pin<&mut h2::codec::framed_read::FramedRead<h2::codec::framed_write::FramedWrite<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<h2::frame::Frame<bytes::bytes::Bytes>, h2::proto::error::Error>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/codec/framed_write.rs:132": {
    "fn_name": "static fn h2::codec::framed_write::FramedWrite<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>::flush<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>(*mut h2::codec::framed_write::FramedWrite<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/codec/framed_write.rs:110": {
    "fn_name": "static fn h2::codec::framed_write::FramedWrite<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>::poll_ready<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>(*mut h2::codec::framed_write::FramedWrite<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/codec/framed_write.rs:169": {
    "fn_name": "static fn h2::codec::framed_write::FramedWrite<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>::shutdown<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>(*mut h2::codec::framed_write::FramedWrite<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/codec/framed_write.rs:346": {
    "fn_name": "static fn h2::codec::framed_write::{impl#4}::poll_read<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>(core::pin::Pin<&mut h2::codec::framed_write::FramedWrite<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>>, *mut core::task::wake::Context, *mut tokio::io::read_buf::ReadBuf)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/codec/mod.rs:150": {
    "fn_name": "static fn h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>::flush<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>(*mut h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/codec/mod.rs:135": {
    "fn_name": "static fn h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>::poll_ready<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>(*mut h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/codec/mod.rs:155": {
    "fn_name": "static fn h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>::shutdown<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>(*mut h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/codec/mod.rs:166": {
    "fn_name": "static fn h2::codec::{impl#3}::poll_next<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>(core::pin::Pin<&mut h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<h2::frame::Frame<bytes::bytes::Bytes>, h2::proto::error::Error>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/connection.rs:316": {
    "fn_name": "static fn h2::proto::connection::Connection<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::client::Peer, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>::poll2<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::client::Peer, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut h2::proto::connection::Connection<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::client::Peer, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), h2::proto::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/connection.rs:262": {
    "fn_name": "static fn h2::proto::connection::Connection<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::client::Peer, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>::poll<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::client::Peer, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut h2::proto::connection::Connection<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::client::Peer, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), h2::proto::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/connection.rs:206": {
    "fn_name": "static fn h2::proto::connection::Connection<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::client::Peer, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>::poll_go_away<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::client::Peer, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut h2::proto::connection::Connection<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::client::Peer, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<h2::frame::reason::Reason, std::io::error::Error>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/connection.rs:186": {
    "fn_name": "static fn h2::proto::connection::Connection<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::client::Peer, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>::poll_ready<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::client::Peer, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut h2::proto::connection::Connection<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::client::Peer, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), h2::proto::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/go_away.rs:120": {
    "fn_name": "static fn h2::proto::go_away::GoAway::send_pending_go_away<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>(*mut h2::proto::go_away::GoAway, *mut core::task::wake::Context, *mut h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<h2::frame::reason::Reason, std::io::error::Error>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/ping_pong.rs:161": {
    "fn_name": "static fn h2::proto::ping_pong::PingPong::send_pending_ping<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>(*mut h2::proto::ping_pong::PingPong, *mut core::task::wake::Context, *mut h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/ping_pong.rs:138": {
    "fn_name": "static fn h2::proto::ping_pong::PingPong::send_pending_pong<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>(*mut h2::proto::ping_pong::PingPong, *mut core::task::wake::Context, *mut h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/settings.rs:111": {
    "fn_name": "static fn h2::proto::settings::Settings::poll_send<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>, h2::client::Peer>(*mut h2::proto::settings::Settings, *mut core::task::wake::Context, *mut h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>, *mut h2::proto::streams::streams::Streams<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>, h2::client::Peer>)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), h2::proto::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/streams/prioritize.rs:512": {
    "fn_name": "static fn h2::proto::streams::prioritize::Prioritize::poll_complete<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut h2::proto::streams::prioritize::Prioritize, *mut core::task::wake::Context, *mut h2::proto::streams::buffer::Buffer<h2::frame::Frame<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>, *mut h2::proto::streams::store::Store, *mut h2::proto::streams::counts::Counts, *mut h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/streams/recv.rs:999": {
    "fn_name": "static fn h2::proto::streams::recv::Recv::poll_complete<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut h2::proto::streams::recv::Recv, *mut core::task::wake::Context, *mut h2::proto::streams::store::Store, *mut h2::proto::streams::counts::Counts, *mut h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/streams/recv.rs:1020": {
    "fn_name": "static fn h2::proto::streams::recv::Recv::send_connection_window_update<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut h2::proto::streams::recv::Recv, *mut core::task::wake::Context, *mut h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/streams/recv.rs:924": {
    "fn_name": "static fn h2::proto::streams::recv::Recv::send_pending_refusal<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut h2::proto::streams::recv::Recv, *mut core::task::wake::Context, *mut h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/streams/recv.rs:1049": {
    "fn_name": "static fn h2::proto::streams::recv::Recv::send_stream_window_updates<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut h2::proto::streams::recv::Recv, *mut core::task::wake::Context, *mut h2::proto::streams::store::Store, *mut h2::proto::streams::counts::Counts, *mut h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/streams/send.rs:294": {
    "fn_name": "static fn h2::proto::streams::send::Send::poll_complete<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut h2::proto::streams::send::Send, *mut core::task::wake::Context, *mut h2::proto::streams::buffer::Buffer<h2::frame::Frame<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>, *mut h2::proto::streams::store::Store, *mut h2::proto::streams::counts::Counts, *mut h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/streams/streams.rs:882": {
    "fn_name": "static fn h2::proto::streams::streams::Inner::poll_complete<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut h2::proto::streams::streams::Inner, *mut h2::proto::streams::streams::SendBuffer<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>, *mut core::task::wake::Context, *mut h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/streams/streams.rs:1277": {
    "fn_name": "static fn h2::proto::streams::streams::StreamRef<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>::poll_capacity<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut h2::proto::streams::streams::StreamRef<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<u32, h2::codec::error::UserError>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/streams/streams.rs:1287": {
    "fn_name": "static fn h2::proto::streams::streams::StreamRef<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>::poll_reset<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut h2::proto::streams::streams::StreamRef<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>, *mut core::task::wake::Context, h2::proto::streams::send::PollReset)",
    "return_type": "core::task::poll::Poll<core::result::Result<h2::frame::reason::Reason, h2::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/streams/streams.rs:177": {
    "fn_name": "static fn h2::proto::streams::streams::Streams<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>, h2::client::Peer>::poll_complete<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>, h2::client::Peer, hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>>(*mut h2::proto::streams::streams::Streams<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>, h2::client::Peer>, *mut core::task::wake::Context, *mut h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/streams/streams.rs:973": {
    "fn_name": "static fn h2::proto::streams::streams::Streams<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>, h2::client::Peer>::poll_pending_open<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut h2::proto::streams::streams::Streams<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>, h2::client::Peer>, *mut core::task::wake::Context, core::option::Option<&h2::proto::streams::streams::OpaqueStreamRef>)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), h2::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/proto/streams/streams.rs:156": {
    "fn_name": "static fn h2::proto::streams::streams::Streams<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>, h2::client::Peer>::send_pending_refusal<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>, h2::client::Peer, hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>>(*mut h2::proto::streams::streams::Streams<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>, h2::client::Peer>, *mut core::task::wake::Context, *mut h2::codec::Codec<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/share.rs:312": {
    "fn_name": "static fn h2::share::SendStream<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>::poll_capacity<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut h2::share::SendStream<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<usize, h2::error::Error>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/h2-0.4.11/src/share.rs:371": {
    "fn_name": "static fn h2::share::SendStream<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>::poll_reset<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>(*mut h2::share::SendStream<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<h2::frame::reason::Reason, h2::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-util-0.1.3/src/combinators/box_body.rs:47": {
    "fn_name": "static fn http_body_util::combinators::box_body::{impl#2}::poll_frame<bytes::bytes::Bytes, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>(core::pin::Pin<&mut http_body_util::combinators::box_body::BoxBody<bytes::bytes::Bytes, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<http_body::frame::Frame<bytes::bytes::Bytes>, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-util-0.1.3/src/combinators/collect.rs:29": {
    "fn_name": "static fn http_body_util::combinators::collect::{impl#0}::poll<reqwest::async_impl::decoder::Decoder>(core::pin::Pin<&mut http_body_util::combinators::collect::Collect<reqwest::async_impl::decoder::Decoder>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<http_body_util::collected::Collected<bytes::bytes::Bytes>, reqwest::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/http-body-util-0.1.3/src/combinators/map_err.rs:57": {
    "fn_name": "static fn http_body_util::combinators::map_err::{impl#1}::poll_frame<reqwest::async_impl::body::TotalTimeoutBody<http_body_util::combinators::map_err::MapErr<reqwest::async_impl::body::ReadTimeoutBody<http_body_util::combinators::box_body::BoxBody<bytes::bytes::Bytes, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>, fn(reqwest::error::Error) -> alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>, fn(reqwest::error::Error) -> alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>(core::pin::Pin<&mut http_body_util::combinators::map_err::MapErr<reqwest::async_impl::body::TotalTimeoutBody<http_body_util::combinators::map_err::MapErr<reqwest::async_impl::body::ReadTimeoutBody<http_body_util::combinators::box_body::BoxBody<bytes::bytes::Bytes, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>, fn(reqwest::error::Error) -> alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>, fn(reqwest::error::Error) -> alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<http_body::frame::Frame<bytes::bytes::Bytes>, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs:143": {
    "fn_name": "static fn hyper::client::conn::http1::SendRequest<reqwest::async_impl::body::Body>::poll_ready<reqwest::async_impl::body::Body>(*mut hyper::client::conn::http1::SendRequest<reqwest::async_impl::body::Body>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs:599": {
    "fn_name": "static fn hyper::client::conn::http1::upgrades::{impl#0}::poll<reqwest::connect::sealed::Conn, reqwest::async_impl::body::Body>(core::pin::Pin<&mut hyper::client::conn::http1::upgrades::UpgradeableConnection<reqwest::connect::sealed::Conn, reqwest::async_impl::body::Body>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs:151": {
    "fn_name": "static fn hyper::client::conn::http1::{impl#1}::ready::{async_fn#0}::{closure#0}<reqwest::async_impl::body::Body>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs:150": {
    "fn_name": "static fn hyper::client::conn::http1::{impl#1}::ready::{async_fn#0}<reqwest::async_impl::body::Body>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs:226": {
    "fn_name": "static fn hyper::client::conn::http1::{impl#2}::try_send_request::{async_block#0}<reqwest::async_impl::body::Body>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<http::response::Response<hyper::body::incoming::Incoming>, hyper::client::dispatch::TrySendError<http::request::Request<reqwest::async_impl::body::Body>>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http1.rs:526": {
    "fn_name": "static fn hyper::client::conn::http1::{impl#7}::handshake::{async_block#0}<reqwest::connect::sealed::Conn, reqwest::async_impl::body::Body>()",
    "return_type": "core::task::poll::Poll<core::result::Result<(hyper::client::conn::http1::SendRequest<reqwest::async_impl::body::Body>, hyper::client::conn::http1::Connection<reqwest::connect::sealed::Conn, reqwest::async_impl::body::Body>), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http2.rs:90": {
    "fn_name": "static fn hyper::client::conn::http2::SendRequest<reqwest::async_impl::body::Body>::poll_ready<reqwest::async_impl::body::Body>(*mut hyper::client::conn::http2::SendRequest<reqwest::async_impl::body::Body>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http2.rs:102": {
    "fn_name": "static fn hyper::client::conn::http2::{impl#1}::ready::{async_fn#0}::{closure#0}<reqwest::async_impl::body::Body>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http2.rs:101": {
    "fn_name": "static fn hyper::client::conn::http2::{impl#1}::ready::{async_fn#0}<reqwest::async_impl::body::Body>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http2.rs:170": {
    "fn_name": "static fn hyper::client::conn::http2::{impl#2}::try_send_request::{async_block#0}<reqwest::async_impl::body::Body>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<http::response::Response<hyper::body::incoming::Incoming>, hyper::client::dispatch::TrySendError<http::request::Request<reqwest::async_impl::body::Body>>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http2.rs:244": {
    "fn_name": "static fn hyper::client::conn::http2::{impl#6}::poll<reqwest::connect::sealed::Conn, reqwest::async_impl::body::Body, hyper_util::common::exec::Exec>(core::pin::Pin<&mut hyper::client::conn::http2::Connection<reqwest::connect::sealed::Conn, reqwest::async_impl::body::Body, hyper_util::common::exec::Exec>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/conn/http2.rs:486": {
    "fn_name": "static fn hyper::client::conn::http2::{impl#7}::handshake::{async_block#0}<hyper_util::common::exec::Exec, reqwest::connect::sealed::Conn, reqwest::async_impl::body::Body>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(hyper::client::conn::http2::SendRequest<reqwest::async_impl::body::Body>, hyper::client::conn::http2::Connection<reqwest::connect::sealed::Conn, reqwest::async_impl::body::Body, hyper_util::common::exec::Exec>), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/dispatch.rs:277": {
    "fn_name": "static fn hyper::client::dispatch::Callback<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>::poll_canceled<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>(*mut hyper::client::dispatch::Callback<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/dispatch.rs:182": {
    "fn_name": "static fn hyper::client::dispatch::Receiver<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>::poll_recv<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>(*mut hyper::client::dispatch::Receiver<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<(http::request::Request<reqwest::async_impl::body::Body>, hyper::client::dispatch::Callback<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>)>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/dispatch.rs:76": {
    "fn_name": "static fn hyper::client::dispatch::Sender<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>::poll_ready<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>(*mut hyper::client::dispatch::Sender<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/client/dispatch.rs:334": {
    "fn_name": "static fn hyper::client::dispatch::{impl#9}::poll<reqwest::async_impl::body::Body>(core::pin::Pin<&mut hyper::client::dispatch::SendWhen<reqwest::async_impl::body::Body>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/common/io/compat.rs:26": {
    "fn_name": "static fn hyper::common::io::compat::{impl#1}::poll_read<reqwest::connect::sealed::Conn>(core::pin::Pin<&mut hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>>, *mut core::task::wake::Context, *mut tokio::io::read_buf::ReadBuf)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/common/io/compat.rs:66": {
    "fn_name": "static fn hyper::common::io::compat::{impl#2}::poll_flush<reqwest::connect::sealed::Conn>(core::pin::Pin<&mut hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/common/io/compat.rs:70": {
    "fn_name": "static fn hyper::common::io::compat::{impl#2}::poll_shutdown<reqwest::connect::sealed::Conn>(core::pin::Pin<&mut hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/common/io/compat.rs:58": {
    "fn_name": "static fn hyper::common::io::compat::{impl#2}::poll_write<reqwest::connect::sealed::Conn>(core::pin::Pin<&mut hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>>, *mut core::task::wake::Context, &[u8])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/common/io/compat.rs:81": {
    "fn_name": "static fn hyper::common::io::compat::{impl#2}::poll_write_vectored<reqwest::connect::sealed::Conn>(core::pin::Pin<&mut hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>>, *mut core::task::wake::Context, &[std::io::IoSlice])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/conn.rs:509": {
    "fn_name": "static fn hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>::force_io_read<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>(*mut hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/conn.rs:490": {
    "fn_name": "static fn hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>::mid_message_detect_eof<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>(*mut hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/conn.rs:337": {
    "fn_name": "static fn hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>::on_read_head_error<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client, (hyper::proto::MessageHead<http::status::StatusCode>, hyper::body::length::DecodedLength, hyper::proto::h1::Wants)>(*mut hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>, hyper::error::Error)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<(hyper::proto::MessageHead<http::status::StatusCode>, hyper::body::length::DecodedLength, hyper::proto::h1::Wants), hyper::error::Error>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/conn.rs:827": {
    "fn_name": "static fn hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>::poll_flush<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>(*mut hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/conn.rs:363": {
    "fn_name": "static fn hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>::poll_read_body<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>(*mut hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<http_body::frame::Frame<bytes::bytes::Bytes>, std::io::error::Error>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/conn.rs:211": {
    "fn_name": "static fn hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>::poll_read_head<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>(*mut hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<(hyper::proto::MessageHead<http::status::StatusCode>, hyper::body::length::DecodedLength, hyper::proto::h1::Wants), hyper::error::Error>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/conn.rs:434": {
    "fn_name": "static fn hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>::poll_read_keep_alive<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>(*mut hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/conn.rs:834": {
    "fn_name": "static fn hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>::poll_shutdown<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>(*mut hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/conn.rs:457": {
    "fn_name": "static fn hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>::require_empty_read<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>(*mut hyper::proto::h1::conn::Conn<reqwest::connect::sealed::Conn, bytes::bytes::Bytes, hyper::proto::h1::role::Client>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/decode.rs:469": {
    "fn_name": "static fn hyper::proto::h1::decode::ChunkedState::read_body<hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>>(*mut core::task::wake::Context, *mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>, *mut u64, *mut core::option::Option<bytes::bytes::Bytes>)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::h1::decode::ChunkedState, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/decode.rs:503": {
    "fn_name": "static fn hyper::proto::h1::decode::ChunkedState::read_body_cr<hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>>(*mut core::task::wake::Context, *mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::h1::decode::ChunkedState, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/decode.rs:515": {
    "fn_name": "static fn hyper::proto::h1::decode::ChunkedState::read_body_lf<hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>>(*mut core::task::wake::Context, *mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::h1::decode::ChunkedState, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/decode.rs:583": {
    "fn_name": "static fn hyper::proto::h1::decode::ChunkedState::read_end_cr<hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>>(*mut core::task::wake::Context, *mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>, *mut core::option::Option<bytes::bytes_mut::BytesMut>, usize)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::h1::decode::ChunkedState, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/decode.rs:614": {
    "fn_name": "static fn hyper::proto::h1::decode::ChunkedState::read_end_lf<hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>>(*mut core::task::wake::Context, *mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>, *mut core::option::Option<bytes::bytes_mut::BytesMut>, usize)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::h1::decode::ChunkedState, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/decode.rs:416": {
    "fn_name": "static fn hyper::proto::h1::decode::ChunkedState::read_extension<hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>>(*mut core::task::wake::Context, *mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>, *mut u64)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::h1::decode::ChunkedState, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/decode.rs:367": {
    "fn_name": "static fn hyper::proto::h1::decode::ChunkedState::read_size<hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>>(*mut core::task::wake::Context, *mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>, *mut u64)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::h1::decode::ChunkedState, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/decode.rs:447": {
    "fn_name": "static fn hyper::proto::h1::decode::ChunkedState::read_size_lf<hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>>(*mut core::task::wake::Context, *mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>, u64)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::h1::decode::ChunkedState, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/decode.rs:400": {
    "fn_name": "static fn hyper::proto::h1::decode::ChunkedState::read_size_lws<hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>>(*mut core::task::wake::Context, *mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::h1::decode::ChunkedState, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/decode.rs:335": {
    "fn_name": "static fn hyper::proto::h1::decode::ChunkedState::read_start<hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>>(*mut core::task::wake::Context, *mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>, *mut u64)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::h1::decode::ChunkedState, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/decode.rs:528": {
    "fn_name": "static fn hyper::proto::h1::decode::ChunkedState::read_trailer<hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>>(*mut core::task::wake::Context, *mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>, *mut core::option::Option<bytes::bytes_mut::BytesMut>, usize)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::h1::decode::ChunkedState, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/decode.rs:549": {
    "fn_name": "static fn hyper::proto::h1::decode::ChunkedState::read_trailer_lf<hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>>(*mut core::task::wake::Context, *mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>, *mut core::option::Option<bytes::bytes_mut::BytesMut>, *mut usize, usize, usize)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::h1::decode::ChunkedState, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/decode.rs:298": {
    "fn_name": "static fn hyper::proto::h1::decode::ChunkedState::step<hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>>(*mut hyper::proto::h1::decode::ChunkedState, *mut core::task::wake::Context, *mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>, *mut u64, *mut u64, *mut core::option::Option<bytes::bytes::Bytes>, *mut core::option::Option<bytes::bytes_mut::BytesMut>, *mut usize, usize, usize)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::h1::decode::ChunkedState, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/decode.rs:144": {
    "fn_name": "static fn hyper::proto::h1::decode::Decoder::decode<hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>>(*mut hyper::proto::h1::decode::Decoder, *mut core::task::wake::Context, *mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<http_body::frame::Frame<bytes::bytes::Bytes>, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/dispatch.rs:123": {
    "fn_name": "static fn hyper::proto::h1::dispatch::Dispatcher<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>::poll_catch<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>(*mut hyper::proto::h1::dispatch::Dispatcher<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>, *mut core::task::wake::Context, bool)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::Dispatched, hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/dispatch.rs:423": {
    "fn_name": "static fn hyper::proto::h1::dispatch::Dispatcher<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>::poll_flush<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>(*mut hyper::proto::h1::dispatch::Dispatcher<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/dispatch.rs:142": {
    "fn_name": "static fn hyper::proto::h1::dispatch::Dispatcher<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>::poll_inner<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>(*mut hyper::proto::h1::dispatch::Dispatcher<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>, *mut core::task::wake::Context, bool)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::Dispatched, hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/dispatch.rs:165": {
    "fn_name": "static fn hyper::proto::h1::dispatch::Dispatcher<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>::poll_loop<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>(*mut hyper::proto::h1::dispatch::Dispatcher<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/dispatch.rs:195": {
    "fn_name": "static fn hyper::proto::h1::dispatch::Dispatcher<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>::poll_read<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>(*mut hyper::proto::h1::dispatch::Dispatcher<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/dispatch.rs:271": {
    "fn_name": "static fn hyper::proto::h1::dispatch::Dispatcher<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>::poll_read_head<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>(*mut hyper::proto::h1::dispatch::Dispatcher<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/dispatch.rs:328": {
    "fn_name": "static fn hyper::proto::h1::dispatch::Dispatcher<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>::poll_write<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>(*mut hyper::proto::h1::dispatch::Dispatcher<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/dispatch.rs:470": {
    "fn_name": "static fn hyper::proto::h1::dispatch::{impl#1}::poll<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>(core::pin::Pin<&mut hyper::proto::h1::dispatch::Dispatcher<hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn, hyper::proto::h1::role::Client>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::Dispatched, hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/dispatch.rs:607": {
    "fn_name": "static fn hyper::proto::h1::dispatch::{impl#5}::poll_msg<reqwest::async_impl::body::Body>(core::pin::Pin<&mut hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<(hyper::proto::MessageHead<hyper::proto::RequestLine>, reqwest::async_impl::body::Body), core::convert::Infallible>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/dispatch.rs:686": {
    "fn_name": "static fn hyper::proto::h1::dispatch::{impl#5}::poll_ready<reqwest::async_impl::body::Body>(*mut hyper::proto::h1::dispatch::Client<reqwest::async_impl::body::Body>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), ()>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/io.rs:170": {
    "fn_name": "static fn hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>::parse<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>, hyper::proto::h1::role::Client>(*mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>, *mut core::task::wake::Context, hyper::proto::h1::ParseContext)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::h1::ParsedMessage<http::status::StatusCode>, hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/io.rs:267": {
    "fn_name": "static fn hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>::poll_flush<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>(*mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/io.rs:307": {
    "fn_name": "static fn hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>::poll_flush_flattened<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>(*mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/io.rs:223": {
    "fn_name": "static fn hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>::poll_read_from_io<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>(*mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h1/io.rs:345": {
    "fn_name": "static fn hyper::proto::h1::io::{impl#3}::read_mem<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>(*mut hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>, *mut core::task::wake::Context, usize)",
    "return_type": "core::task::poll::Poll<core::result::Result<bytes::bytes::Bytes, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h2/client.rs:157": {
    "fn_name": "static fn hyper::proto::h2::client::handshake::{async_fn#0}<reqwest::connect::sealed::Conn, reqwest::async_impl::body::Body, hyper_util::common::exec::Exec>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::h2::client::ClientTask<reqwest::async_impl::body::Body, hyper_util::common::exec::Exec, reqwest::connect::sealed::Conn>, hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h2/client.rs:468": {
    "fn_name": "static fn hyper::proto::h2::client::{impl#10}::poll<reqwest::async_impl::body::Body>(core::pin::Pin<&mut hyper::proto::h2::client::PipeMap<reqwest::async_impl::body::Body>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h2/client.rs:563": {
    "fn_name": "static fn hyper::proto::h2::client::{impl#12}::poll<reqwest::async_impl::body::Body>(core::pin::Pin<&mut hyper::proto::h2::client::ResponseFutMap<reqwest::async_impl::body::Body>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<http::response::Response<hyper::body::incoming::Incoming>, (hyper::error::Error, core::option::Option<http::request::Request<reqwest::async_impl::body::Body>>)>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h2/client.rs:631": {
    "fn_name": "static fn hyper::proto::h2::client::{impl#13}::poll<reqwest::async_impl::body::Body, hyper_util::common::exec::Exec, reqwest::connect::sealed::Conn>(core::pin::Pin<&mut hyper::proto::h2::client::ClientTask<reqwest::async_impl::body::Body, hyper_util::common::exec::Exec, reqwest::connect::sealed::Conn>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::proto::Dispatched, hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h2/client.rs:233": {
    "fn_name": "static fn hyper::proto::h2::client::{impl#2}::poll<reqwest::connect::sealed::Conn, reqwest::async_impl::body::Body>(core::pin::Pin<&mut hyper::proto::h2::client::Conn<reqwest::connect::sealed::Conn, reqwest::async_impl::body::Body>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), h2::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h2/client.rs:273": {
    "fn_name": "static fn hyper::proto::h2::client::{impl#3}::poll<reqwest::connect::sealed::Conn, reqwest::async_impl::body::Body>(core::pin::Pin<&mut hyper::proto::h2::client::ConnMapErr<reqwest::connect::sealed::Conn, reqwest::async_impl::body::Body>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), ()>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h2/client.rs:341": {
    "fn_name": "static fn hyper::proto::h2::client::{impl#6}::poll<reqwest::connect::sealed::Conn, reqwest::async_impl::body::Body>(core::pin::Pin<&mut hyper::proto::h2::client::ConnTask<reqwest::connect::sealed::Conn, reqwest::async_impl::body::Body>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h2/client.rs:395": {
    "fn_name": "static fn hyper::proto::h2::client::{impl#7}::poll<reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn>(core::pin::Pin<&mut hyper::proto::h2::client::H2ClientFuture<reqwest::async_impl::body::Body, reqwest::connect::sealed::Conn>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h2/mod.rs:402": {
    "fn_name": "static fn hyper::proto::h2::UpgradedSendStream<bytes::bytes::Bytes>::poll_capacity<bytes::bytes::Bytes>(*mut hyper::proto::h2::UpgradedSendStream<bytes::bytes::Bytes>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<usize, h2::error::Error>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h2/mod.rs:406": {
    "fn_name": "static fn hyper::proto::h2::UpgradedSendStream<bytes::bytes::Bytes>::poll_reset<bytes::bytes::Bytes>(*mut hyper::proto::h2::UpgradedSendStream<bytes::bytes::Bytes>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<h2::frame::reason::Reason, h2::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h2/mod.rs:118": {
    "fn_name": "static fn hyper::proto::h2::{impl#1}::poll<reqwest::async_impl::body::Body>(core::pin::Pin<&mut hyper::proto::h2::PipeToSendStream<reqwest::async_impl::body::Body>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h2/mod.rs:277": {
    "fn_name": "static fn hyper::proto::h2::{impl#4}::poll_read<bytes::bytes::Bytes>(core::pin::Pin<&mut hyper::proto::h2::H2Upgraded<bytes::bytes::Bytes>>, *mut core::task::wake::Context, hyper::rt::io::ReadBufCursor)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h2/mod.rs:354": {
    "fn_name": "static fn hyper::proto::h2::{impl#5}::poll_flush<bytes::bytes::Bytes>(core::pin::Pin<&mut hyper::proto::h2::H2Upgraded<bytes::bytes::Bytes>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h2/mod.rs:358": {
    "fn_name": "static fn hyper::proto::h2::{impl#5}::poll_shutdown<bytes::bytes::Bytes>(core::pin::Pin<&mut hyper::proto::h2::H2Upgraded<bytes::bytes::Bytes>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/proto/h2/mod.rs:317": {
    "fn_name": "static fn hyper::proto::h2::{impl#5}::poll_write<bytes::bytes::Bytes>(core::pin::Pin<&mut hyper::proto::h2::H2Upgraded<bytes::bytes::Bytes>>, *mut core::task::wake::Context, &[u8])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/rt/io.rs:89": {
    "fn_name": "static fn hyper::rt::io::Write::poll_write_vectored<hyper::proto::h2::H2Upgraded<bytes::bytes::Bytes>>(core::pin::Pin<&mut hyper::proto::h2::H2Upgraded<bytes::bytes::Bytes>>, *mut core::task::wake::Context, &[std::io::IoSlice])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/rt/io.rs:290": {
    "fn_name": "static fn hyper::rt::io::{impl#3}::poll_read<dyn reqwest::connect::AsyncConnWithInfo>(core::pin::Pin<&mut alloc::boxed::Box<dyn reqwest::connect::AsyncConnWithInfo, alloc::alloc::Global>>, *mut core::task::wake::Context, hyper::rt::io::ReadBufCursor)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/rt/io.rs:344": {
    "fn_name": "static fn hyper::rt::io::{impl#6}::poll_flush<dyn reqwest::connect::AsyncConnWithInfo>(core::pin::Pin<&mut alloc::boxed::Box<dyn reqwest::connect::AsyncConnWithInfo, alloc::alloc::Global>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/rt/io.rs:348": {
    "fn_name": "static fn hyper::rt::io::{impl#6}::poll_shutdown<dyn reqwest::connect::AsyncConnWithInfo>(core::pin::Pin<&mut alloc::boxed::Box<dyn reqwest::connect::AsyncConnWithInfo, alloc::alloc::Global>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/rt/io.rs:324": {
    "fn_name": "static fn hyper::rt::io::{impl#6}::poll_write<dyn reqwest::connect::AsyncConnWithInfo>(core::pin::Pin<&mut alloc::boxed::Box<dyn reqwest::connect::AsyncConnWithInfo, alloc::alloc::Global>>, *mut core::task::wake::Context, &[u8])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-1.6.0/src/rt/io.rs:332": {
    "fn_name": "static fn hyper::rt::io::{impl#6}::poll_write_vectored<dyn reqwest::connect::AsyncConnWithInfo>(core::pin::Pin<&mut alloc::boxed::Box<dyn reqwest::connect::AsyncConnWithInfo, alloc::alloc::Global>>, *mut core::task::wake::Context, &[std::io::IoSlice])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-tls-0.6.0/src/client.rs:167": {
    "fn_name": "static fn hyper_tls::client::err::{async_block#0}<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>()",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-tls-0.6.0/src/client.rs:149": {
    "fn_name": "static fn hyper_tls::client::{impl#5}::call::{async_block#1}<hyper_util::client::legacy::connect::http::HttpConnector<reqwest::dns::resolve::DynResolver>>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-tls-0.6.0/src/client.rs:178": {
    "fn_name": "static fn hyper_tls::client::{impl#6}::poll<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>(core::pin::Pin<&mut hyper_tls::client::HttpsConnecting<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-tls-0.6.0/src/stream.rs:54": {
    "fn_name": "static fn hyper_tls::stream::{impl#4}::poll_read<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>(core::pin::Pin<&mut hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, *mut core::task::wake::Context, hyper::rt::io::ReadBufCursor)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-tls-0.6.0/src/stream.rs:98": {
    "fn_name": "static fn hyper_tls::stream::{impl#5}::poll_flush<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>(core::pin::Pin<&mut hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-tls-0.6.0/src/stream.rs:106": {
    "fn_name": "static fn hyper_tls::stream::{impl#5}::poll_shutdown<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>(core::pin::Pin<&mut hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-tls-0.6.0/src/stream.rs:68": {
    "fn_name": "static fn hyper_tls::stream::{impl#5}::poll_write<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>(core::pin::Pin<&mut hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, *mut core::task::wake::Context, &[u8])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-tls-0.6.0/src/stream.rs:79": {
    "fn_name": "static fn hyper_tls::stream::{impl#5}::poll_write_vectored<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>(core::pin::Pin<&mut hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, *mut core::task::wake::Context, &[std::io::IoSlice])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/client.rs:780": {
    "fn_name": "static fn hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>::poll_ready<reqwest::async_impl::body::Body>(*mut hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper_util::client::legacy::client::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/client.rs:544": {
    "fn_name": "static fn hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure#1}::{async_block#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/client.rs:372": {
    "fn_name": "static fn hyper_util::client::legacy::client::{impl#1}::connection_for::{async_fn#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/client.rs:395": {
    "fn_name": "static fn hyper_util::client::legacy::client::{impl#1}::one_connection_for::{async_fn#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::ClientConnectError>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/client.rs:246": {
    "fn_name": "static fn hyper_util::client::legacy::client::{impl#1}::send_request::{async_fn#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<http::response::Response<hyper::body::incoming::Incoming>, hyper_util::client::legacy::client::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/client.rs:362": {
    "fn_name": "static fn hyper_util::client::legacy::client::{impl#1}::try_send_request::{async_fn#0}::{closure#1}<reqwest::connect::Connector, reqwest::async_impl::body::Body>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper_util::client::legacy::client::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/client.rs:279": {
    "fn_name": "static fn hyper_util::client::legacy::client::{impl#1}::try_send_request::{async_fn#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<http::response::Response<hyper::body::incoming::Incoming>, hyper_util::client::legacy::client::TrySendError<reqwest::async_impl::body::Body>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/client.rs:681": {
    "fn_name": "static fn hyper_util::client::legacy::client::{impl#2}::poll_ready<reqwest::connect::Connector, reqwest::async_impl::body::Body>(*mut hyper_util::client::legacy::client::Client<reqwest::connect::Connector, reqwest::async_impl::body::Body>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper_util::client::legacy::client::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/connect/dns.rs:294": {
    "fn_name": "static fn hyper_util::client::legacy::connect::dns::resolve::{async_fn#0}::{closure#0}<reqwest::dns::resolve::DynResolver>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/connect/dns.rs:293": {
    "fn_name": "static fn hyper_util::client::legacy::connect::dns::resolve::{async_fn#0}<reqwest::dns::resolve::DynResolver>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<alloc::boxed::Box<(dyn core::iter::traits::iterator::Iterator<Item=core::net::socket_addr::SocketAddr> + core::marker::Send), alloc::alloc::Global>, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/connect/dns.rs:280": {
    "fn_name": "static fn hyper_util::client::legacy::connect::dns::sealed::{impl#0}::poll_ready<reqwest::dns::resolve::DynResolver>(*mut reqwest::dns::resolve::DynResolver, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/connect/http.rs:955": {
    "fn_name": "static fn hyper_util::client::legacy::connect::http::connect::{async_block#0}(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<tokio::net::tcp::stream::TcpStream, hyper_util::client::legacy::connect::http::ConnectError>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/connect/http.rs:641": {
    "fn_name": "static fn hyper_util::client::legacy::connect::http::{impl#10}::poll<reqwest::dns::resolve::DynResolver>(core::pin::Pin<&mut hyper_util::client::legacy::connect::http::HttpConnecting<reqwest::dns::resolve::DynResolver>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>, hyper_util::client::legacy::connect::http::ConnectError>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/connect/http.rs:765": {
    "fn_name": "static fn hyper_util::client::legacy::connect::http::{impl#17}::connect::{async_fn#0}(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<tokio::net::tcp::stream::TcpStream, hyper_util::client::legacy::connect::http::ConnectError>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/connect/http.rs:969": {
    "fn_name": "static fn hyper_util::client::legacy::connect::http::{impl#18}::connect::{async_fn#0}(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<tokio::net::tcp::stream::TcpStream, hyper_util::client::legacy::connect::http::ConnectError>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/connect/http.rs:475": {
    "fn_name": "static fn hyper_util::client::legacy::connect::http::{impl#4}::call::{async_block#0}<reqwest::dns::resolve::DynResolver>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>, hyper_util::client::legacy::connect::http::ConnectError>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/connect/http.rs:533": {
    "fn_name": "static fn hyper_util::client::legacy::connect::http::{impl#5}::call_async::{async_fn#0}<reqwest::dns::resolve::DynResolver>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>, hyper_util::client::legacy::connect::http::ConnectError>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/connect/proxy/tunnel.rs:171": {
    "fn_name": "static fn hyper_util::client::legacy::connect::proxy::tunnel::tunnel::{async_fn#0}<hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>, hyper_util::client::legacy::connect::proxy::tunnel::TunnelError>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/connect/proxy/tunnel.rs:140": {
    "fn_name": "static fn hyper_util::client::legacy::connect::proxy::tunnel::{impl#1}::call::{async_block#0}<hyper_tls::client::HttpsConnector<hyper_util::client::legacy::connect::http::HttpConnector<reqwest::dns::resolve::DynResolver>>>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>, hyper_util::client::legacy::connect::proxy::tunnel::TunnelError>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/connect/proxy/tunnel.rs:163": {
    "fn_name": "static fn hyper_util::client::legacy::connect::proxy::tunnel::{impl#2}::poll<hyper_tls::client::HttpsConnecting<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>, hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>(core::pin::Pin<&mut hyper_util::client::legacy::connect::proxy::tunnel::Tunneling<hyper_tls::client::HttpsConnecting<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>, hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>, hyper_util::client::legacy::connect::proxy::tunnel::TunnelError>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/pool.rs:622": {
    "fn_name": "static fn hyper_util::client::legacy::pool::Checkout<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>::poll_waiter<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>(*mut hyper_util::client::legacy::pool::Checkout<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::pool::Error>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/pool.rs:701": {
    "fn_name": "static fn hyper_util::client::legacy::pool::{impl#18}::poll<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>(core::pin::Pin<&mut hyper_util::client::legacy::pool::Checkout<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::pool::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/client/legacy/pool.rs:785": {
    "fn_name": "static fn hyper_util::client::legacy::pool::{impl#23}::run::{async_fn#0}<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/common/future.rs:27": {
    "fn_name": "static fn hyper_util::common::future::{impl#1}::poll<core::result::Result<usize, std::io::error::Error>, hyper_util::rt::io::read::{async_fn#0}::{closure_env#0}<hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>(core::pin::Pin<&mut hyper_util::common::future::PollFn<hyper_util::rt::io::read::{async_fn#0}::{closure_env#0}<hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/common/lazy.rs:60": {
    "fn_name": "static fn hyper_util::common::lazy::{impl#1}::poll<hyper_util::client::legacy::client::{impl#1}::connect_to::{closure_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>, futures_util::future::either::Either<futures_util::future::try_future::AndThen<futures_util::future::try_future::MapErr<hyper_util::service::oneshot::Oneshot<reqwest::connect::Connector, http::uri::Uri>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, futures_util::future::either::Either<core::pin::Pin<alloc::boxed::Box<hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure#1}::{async_block_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>, alloc::alloc::Global>>, futures_util::future::ready::Ready<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#1}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, futures_util::future::ready::Ready<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>>>(core::pin::Pin<&mut hyper_util::common::lazy::Lazy<hyper_util::client::legacy::client::{impl#1}::connect_to::{closure_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>, futures_util::future::either::Either<futures_util::future::try_future::AndThen<futures_util::future::try_future::MapErr<hyper_util::service::oneshot::Oneshot<reqwest::connect::Connector, http::uri::Uri>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, futures_util::future::either::Either<core::pin::Pin<alloc::boxed::Box<hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure#1}::{async_block_env#0}<reqwest::connect::Connector, reqwest::async_impl::body::Body>, alloc::alloc::Global>>, futures_util::future::ready::Ready<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>>, hyper_util::client::legacy::client::{impl#1}::connect_to::{closure#0}::{closure_env#1}<reqwest::connect::Connector, reqwest::async_impl::body::Body>>, futures_util::future::ready::Ready<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::pool::Pooled<hyper_util::client::legacy::client::PoolClient<reqwest::async_impl::body::Body>, (http::uri::scheme::Scheme, http::uri::authority::Authority)>, hyper_util::client::legacy::client::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/rt/io.rs:14": {
    "fn_name": "static fn hyper_util::rt::io::read::{async_fn#0}::{closure#0}<hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/rt/io.rs:13": {
    "fn_name": "static fn hyper_util::rt::io::read::{async_fn#0}<hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/rt/io.rs:27": {
    "fn_name": "static fn hyper_util::rt::io::write_all::{async_fn#0}::{closure#0}<hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/rt/io.rs:25": {
    "fn_name": "static fn hyper_util::rt::io::write_all::{async_fn#0}<hyper_tls::stream::MaybeHttpsStream<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/rt/tokio.rs:154": {
    "fn_name": "static fn hyper_util::rt::tokio::{impl#3}::poll_read<tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>(core::pin::Pin<&mut hyper_util::rt::tokio::TokioIo<tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>>, *mut core::task::wake::Context, hyper::rt::io::ReadBufCursor)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/rt/tokio.rs:186": {
    "fn_name": "static fn hyper_util::rt::tokio::{impl#4}::poll_flush<tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>(core::pin::Pin<&mut hyper_util::rt::tokio::TokioIo<tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/rt/tokio.rs:190": {
    "fn_name": "static fn hyper_util::rt::tokio::{impl#4}::poll_shutdown<tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>(core::pin::Pin<&mut hyper_util::rt::tokio::TokioIo<tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/rt/tokio.rs:178": {
    "fn_name": "static fn hyper_util::rt::tokio::{impl#4}::poll_write<tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>(core::pin::Pin<&mut hyper_util::rt::tokio::TokioIo<tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>>, *mut core::task::wake::Context, &[u8])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/rt/tokio.rs:201": {
    "fn_name": "static fn hyper_util::rt::tokio::{impl#4}::poll_write_vectored<tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>(core::pin::Pin<&mut hyper_util::rt::tokio::TokioIo<tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>>, *mut core::task::wake::Context, &[std::io::IoSlice])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/rt/tokio.rs:214": {
    "fn_name": "static fn hyper_util::rt::tokio::{impl#5}::poll_read<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>(core::pin::Pin<&mut hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, *mut core::task::wake::Context, *mut tokio::io::read_buf::ReadBuf)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/rt/tokio.rs:254": {
    "fn_name": "static fn hyper_util::rt::tokio::{impl#6}::poll_flush<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>(core::pin::Pin<&mut hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/rt/tokio.rs:246": {
    "fn_name": "static fn hyper_util::rt::tokio::{impl#6}::poll_write<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>(core::pin::Pin<&mut hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, *mut core::task::wake::Context, &[u8])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/hyper-util-0.1.16/src/service/oneshot.rs:45": {
    "fn_name": "static fn hyper_util::service::oneshot::{impl#1}::poll<reqwest::connect::Connector, http::uri::Uri>(core::pin::Pin<&mut hyper_util::service::oneshot::Oneshot<reqwest::connect::Connector, http::uri::Uri>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/reqwest-0.12.22/src/async_impl/response.rs:294": {
    "fn_name": "static fn reqwest::async_impl::response::{impl#0}::bytes::{async_fn#0}(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<bytes::bytes::Bytes, reqwest::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/reqwest-0.12.22/src/async_impl/response.rs:167": {
    "fn_name": "static fn reqwest::async_impl::response::{impl#0}::text::{async_fn#0}(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<alloc::string::String, reqwest::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/reqwest-0.12.22/src/async_impl/response.rs:212": {
    "fn_name": "static fn reqwest::async_impl::response::{impl#0}::text_with_charset::{async_fn#0}(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<alloc::string::String, reqwest::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/reqwest-0.12.22/src/lib.rs:323": {
    "fn_name": "static fn reqwest::get::{async_fn#0}<&str>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<reqwest::async_impl::response::Response, reqwest::error::Error>>",
    "async_backtrace": true
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/io/async_write.rs:158": {
    "fn_name": "static fn tokio::io::async_write::AsyncWrite::poll_write_vectored<tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>(core::pin::Pin<&mut tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>, *mut core::task::wake::Context, &[std::io::IoSlice])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/io/async_write.rs:187": {
    "fn_name": "static fn tokio::io::async_write::{impl#1}::poll_write<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>>(core::pin::Pin<&mut &mut hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>>, *mut core::task::wake::Context, &[u8])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/io/util/write_all.rs:40": {
    "fn_name": "static fn tokio::io::util::write_all::{impl#0}::poll<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>>(core::pin::Pin<&mut tokio::io::util::write_all::WriteAll<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/net/tcp/socket.rs:660": {
    "fn_name": "static fn tokio::net::tcp::socket::{impl#0}::connect::{async_fn#0}(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<tokio::net::tcp::stream::TcpStream, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/net/tcp/stream.rs:141": {
    "fn_name": "static fn tokio::net::tcp::stream::{impl#0}::connect_mio::{async_fn#0}(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<tokio::net::tcp::stream::TcpStream, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/net/tcp/stream.rs:150": {
    "fn_name": "static fn tokio::net::tcp::stream::{impl#0}::connect_mio::{async_fn#0}::{closure#0}(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<tokio::runtime::io::driver::ReadyEvent, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/net/tcp/stream.rs:1373": {
    "fn_name": "static fn tokio::net::tcp::stream::{impl#3}::poll_flush(core::pin::Pin<&mut tokio::net::tcp::stream::TcpStream>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/runtime/blocking/task.rs:27": {
    "fn_name": "static fn tokio::runtime::blocking::task::{impl#2}::poll<hyper_util::client::legacy::connect::dns::{impl#7}::call::{closure_env#0}, core::result::Result<hyper_util::client::legacy::connect::dns::SocketAddrs, std::io::error::Error>>(core::pin::Pin<&mut tokio::runtime::blocking::task::BlockingTask<hyper_util::client::legacy::connect::dns::{impl#7}::call::{closure_env#0}>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::connect::dns::SocketAddrs, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/runtime/park.rs:285": {
    "fn_name": "static fn tokio::runtime::park::{impl#4}::block_on::{closure#0}<tokio_test_project::main::{async_block_env#0}>()",
    "return_type": "core::task::poll::Poll<core::result::Result<(), alloc::boxed::Box<dyn core::error::Error, alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/runtime/scheduler/current_thread/mod.rs:206": {
    "fn_name": "static fn tokio::runtime::scheduler::current_thread::{impl#0}::block_on::{closure#0}::{closure#0}<tokio_test_project::main::{async_block_env#0}>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<(), alloc::boxed::Box<dyn core::error::Error, alloc::alloc::Global>>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/runtime/scheduler/current_thread/mod.rs:742": {
    "fn_name": "static fn tokio::runtime::scheduler::current_thread::{impl#8}::block_on::{closure#0}::{closure#0}::{closure#0}<core::pin::Pin<&mut tokio_test_project::main::{async_block_env#0}>>()",
    "return_type": "core::task::poll::Poll<core::result::Result<(), alloc::boxed::Box<dyn core::error::Error, alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/runtime/scheduler/current_thread/mod.rs:741": {
    "fn_name": "static fn tokio::runtime::scheduler::current_thread::{impl#8}::block_on::{closure#0}::{closure#0}<core::pin::Pin<&mut tokio_test_project::main::{async_block_env#0}>>()",
    "return_type": "core::task::poll::Poll<core::result::Result<(), alloc::boxed::Box<dyn core::error::Error, alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/runtime/task/core.rs:352": {
    "fn_name": "static fn tokio::runtime::task::core::Core<tokio::runtime::blocking::task::BlockingTask<hyper_util::client::legacy::connect::dns::{impl#7}::call::{closure_env#0}>, tokio::runtime::blocking::schedule::BlockingSchedule>::poll<tokio::runtime::blocking::task::BlockingTask<hyper_util::client::legacy::connect::dns::{impl#7}::call::{closure_env#0}>, tokio::runtime::blocking::schedule::BlockingSchedule>(*mut tokio::runtime::task::core::Core<tokio::runtime::blocking::task::BlockingTask<hyper_util::client::legacy::connect::dns::{impl#7}::call::{closure_env#0}>, tokio::runtime::blocking::schedule::BlockingSchedule>, core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::connect::dns::SocketAddrs, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/runtime/task/core.rs:354": {
    "fn_name": "static fn tokio::runtime::task::core::{impl#6}::poll::{closure#0}<tokio::runtime::blocking::task::BlockingTask<hyper_util::client::legacy::connect::dns::{impl#7}::call::{closure_env#0}>, tokio::runtime::blocking::schedule::BlockingSchedule>(*mut tokio::runtime::task::core::Stage<tokio::runtime::blocking::task::BlockingTask<hyper_util::client::legacy::connect::dns::{impl#7}::call::{closure_env#0}>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::connect::dns::SocketAddrs, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/runtime/task/harness.rs:523": {
    "fn_name": "static fn tokio::runtime::task::harness::poll_future::{closure#0}<tokio::runtime::blocking::task::BlockingTask<hyper_util::client::legacy::connect::dns::{impl#7}::call::{closure_env#0}>, tokio::runtime::blocking::schedule::BlockingSchedule>()",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::connect::dns::SocketAddrs, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/runtime/task/harness.rs:521": {
    "fn_name": "static fn tokio::runtime::task::harness::poll_future<tokio::runtime::blocking::task::BlockingTask<hyper_util::client::legacy::connect::dns::{impl#7}::call::{closure_env#0}>, tokio::runtime::blocking::schedule::BlockingSchedule>(*mut tokio::runtime::task::core::Core<tokio::runtime::blocking::task::BlockingTask<hyper_util::client::legacy::connect::dns::{impl#7}::call::{closure_env#0}>, tokio::runtime::blocking::schedule::BlockingSchedule>, core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/runtime/task/join.rs:320": {
    "fn_name": "static fn tokio::runtime::task::join::{impl#6}::poll<core::result::Result<hyper_util::client::legacy::connect::dns::SocketAddrs, std::io::error::Error>>(core::pin::Pin<&mut tokio::runtime::task::join::JoinHandle<core::result::Result<hyper_util::client::legacy::connect::dns::SocketAddrs, std::io::error::Error>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<core::result::Result<hyper_util::client::legacy::connect::dns::SocketAddrs, std::io::error::Error>, tokio::runtime::task::error::JoinError>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/sync/mpsc/chan.rs:289": {
    "fn_name": "static fn tokio::sync::mpsc::chan::Rx<hyper::client::dispatch::Envelope<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>, tokio::sync::mpsc::unbounded::Semaphore>::recv<hyper::client::dispatch::Envelope<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>, tokio::sync::mpsc::unbounded::Semaphore>(*mut tokio::sync::mpsc::chan::Rx<hyper::client::dispatch::Envelope<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>, tokio::sync::mpsc::unbounded::Semaphore>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<hyper::client::dispatch::Envelope<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/sync/mpsc/chan.rs:297": {
    "fn_name": "static fn tokio::sync::mpsc::chan::{impl#12}::recv::{closure#0}<hyper::client::dispatch::Envelope<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>, tokio::sync::mpsc::unbounded::Semaphore>(*mut tokio::sync::mpsc::chan::RxFields<hyper::client::dispatch::Envelope<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>>)",
    "return_type": "core::task::poll::Poll<core::option::Option<hyper::client::dispatch::Envelope<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/sync/mpsc/unbounded.rs:431": {
    "fn_name": "static fn tokio::sync::mpsc::unbounded::UnboundedReceiver<hyper::client::dispatch::Envelope<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>>::poll_recv<hyper::client::dispatch::Envelope<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>>(*mut tokio::sync::mpsc::unbounded::UnboundedReceiver<hyper::client::dispatch::Envelope<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<hyper::client::dispatch::Envelope<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/sync/mpsc/unbounded.rs:170": {
    "fn_name": "static fn tokio::sync::mpsc::unbounded::{impl#3}::recv::{async_fn#0}::{closure#0}<hyper::client::dispatch::Envelope<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<hyper::client::dispatch::Envelope<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/sync/mpsc/unbounded.rs:167": {
    "fn_name": "static fn tokio::sync::mpsc::unbounded::{impl#3}::recv::{async_fn#0}<hyper::client::dispatch::Envelope<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<hyper::client::dispatch::Envelope<http::request::Request<reqwest::async_impl::body::Body>, http::response::Response<hyper::body::incoming::Incoming>>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/sync/oneshot.rs:1285": {
    "fn_name": "static fn tokio::sync::oneshot::Inner<hyper::error::Error>::poll_recv<hyper::error::Error>(*mut tokio::sync::oneshot::Inner<hyper::error::Error>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::error::Error, tokio::sync::oneshot::error::RecvError>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/sync/oneshot.rs:793": {
    "fn_name": "static fn tokio::sync::oneshot::Sender<core::result::Result<http::response::Response<hyper::body::incoming::Incoming>, hyper::error::Error>>::poll_closed<core::result::Result<http::response::Response<hyper::body::incoming::Incoming>, hyper::error::Error>>(*mut tokio::sync::oneshot::Sender<core::result::Result<http::response::Response<hyper::body::incoming::Incoming>, hyper::error::Error>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/sync/oneshot.rs:1241": {
    "fn_name": "static fn tokio::sync::oneshot::{impl#5}::poll<hyper::error::Error>(core::pin::Pin<&mut tokio::sync::oneshot::Receiver<hyper::error::Error>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper::error::Error, tokio::sync::oneshot::error::RecvError>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/task/coop/mod.rs:291": {
    "fn_name": "static fn tokio::task::coop::poll_proceed(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<tokio::task::coop::RestoreOnPending>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/time/timeout.rs:210": {
    "fn_name": "static fn tokio::time::timeout::{impl#1}::poll::{closure#0}<tokio::net::tcp::socket::{impl#0}::connect::{async_fn_env#0}>()",
    "return_type": "core::task::poll::Poll<core::result::Result<core::result::Result<tokio::net::tcp::stream::TcpStream, std::io::error::Error>, tokio::time::error::Elapsed>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-1.46.1/src/time/timeout.rs:196": {
    "fn_name": "static fn tokio::time::timeout::{impl#1}::poll<tokio::net::tcp::socket::{impl#0}::connect::{async_fn_env#0}>(core::pin::Pin<&mut tokio::time::timeout::Timeout<tokio::net::tcp::socket::{impl#0}::connect::{async_fn_env#0}>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<core::result::Result<tokio::net::tcp::stream::TcpStream, std::io::error::Error>, tokio::time::error::Elapsed>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-native-tls-0.3.1/src/lib.rs:159": {
    "fn_name": "static fn tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>::with_context<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>, tokio_native_tls::{impl#9}::poll_write::{closure_env#0}<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, usize>(*mut tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, *mut core::task::wake::Context, tokio_native_tls::{impl#9}::poll_write::{closure_env#0}<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-native-tls-0.3.1/src/lib.rs:249": {
    "fn_name": "static fn tokio_native_tls::handshake::{async_fn#0}<tokio_native_tls::{impl#12}::connect::{async_fn#0}::{closure_env#0}<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, native_tls::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-native-tls-0.3.1/src/lib.rs:270": {
    "fn_name": "static fn tokio_native_tls::{impl#11}::poll<tokio_native_tls::{impl#12}::connect::{async_fn#0}::{closure_env#0}<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(core::pin::Pin<&mut tokio_native_tls::StartedHandshakeFuture<tokio_native_tls::{impl#12}::connect::{async_fn#0}::{closure_env#0}<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<tokio_native_tls::StartedHandshake<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, native_tls::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-native-tls-0.3.1/src/lib.rs:310": {
    "fn_name": "static fn tokio_native_tls::{impl#12}::connect::{async_fn#0}<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, native_tls::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-native-tls-0.3.1/src/lib.rs:361": {
    "fn_name": "static fn tokio_native_tls::{impl#18}::poll<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(core::pin::Pin<&mut tokio_native_tls::MidHandshake<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, native_tls::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-native-tls-0.3.1/src/lib.rs:140": {
    "fn_name": "static fn tokio_native_tls::{impl#5}::read::{closure#0}<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(*mut core::task::wake::Context, core::pin::Pin<&mut hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-native-tls-0.3.1/src/lib.rs:154": {
    "fn_name": "static fn tokio_native_tls::{impl#6}::flush::{closure#0}<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(tokio_native_tls::{impl#6}::flush::{closure_env#0}<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>, *mut core::task::wake::Context, core::pin::Pin<&mut hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-native-tls-0.3.1/src/lib.rs:150": {
    "fn_name": "static fn tokio_native_tls::{impl#6}::write::{closure#0}<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(*mut core::task::wake::Context, core::pin::Pin<&mut hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-native-tls-0.3.1/src/lib.rs:188": {
    "fn_name": "static fn tokio_native_tls::{impl#8}::poll_read<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(core::pin::Pin<&mut tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>, *mut core::task::wake::Context, *mut tokio::io::read_buf::ReadBuf)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-native-tls-0.3.1/src/lib.rs:213": {
    "fn_name": "static fn tokio_native_tls::{impl#9}::poll_flush<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(core::pin::Pin<&mut tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-native-tls-0.3.1/src/lib.rs:217": {
    "fn_name": "static fn tokio_native_tls::{impl#9}::poll_shutdown<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(core::pin::Pin<&mut tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-native-tls-0.3.1/src/lib.rs:205": {
    "fn_name": "static fn tokio_native_tls::{impl#9}::poll_write<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(core::pin::Pin<&mut tokio_native_tls::TlsStream<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>, *mut core::task::wake::Context, &[u8])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-util-0.7.15/src/codec/framed_impl.rs:124": {
    "fn_name": "static fn tokio_util::codec::framed_impl::{impl#8}::poll_next<h2::codec::framed_write::FramedWrite<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>, tokio_util::codec::length_delimited::LengthDelimitedCodec, tokio_util::codec::framed_impl::ReadFrame>(core::pin::Pin<&mut tokio_util::codec::framed_impl::FramedImpl<h2::codec::framed_write::FramedWrite<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>, tokio_util::codec::length_delimited::LengthDelimitedCodec, tokio_util::codec::framed_impl::ReadFrame>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<bytes::bytes_mut::BytesMut, std::io::error::Error>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-util-0.7.15/src/codec/framed_read.rs:166": {
    "fn_name": "static fn tokio_util::codec::framed_read::{impl#2}::poll_next<h2::codec::framed_write::FramedWrite<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>, tokio_util::codec::length_delimited::LengthDelimitedCodec>(core::pin::Pin<&mut tokio_util::codec::framed_read::FramedRead<h2::codec::framed_write::FramedWrite<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>, tokio_util::codec::length_delimited::LengthDelimitedCodec>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<bytes::bytes_mut::BytesMut, std::io::error::Error>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-util-0.7.15/src/util/poll_buf.rs:47": {
    "fn_name": "static fn tokio_util::util::poll_buf::poll_read_buf<h2::codec::framed_write::FramedWrite<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>, bytes::bytes_mut::BytesMut>(core::pin::Pin<&mut h2::codec::framed_write::FramedWrite<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>>, *mut core::task::wake::Context, *mut bytes::bytes_mut::BytesMut)",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tokio-util-0.7.15/src/util/poll_buf.rs:121": {
    "fn_name": "static fn tokio_util::util::poll_buf::poll_write_buf<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, std::io::cursor::Cursor<bytes::bytes_mut::BytesMut>>(core::pin::Pin<&mut hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>>, *mut core::task::wake::Context, *mut std::io::cursor::Cursor<bytes::bytes_mut::BytesMut>)",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-0.5.2/src/macros.rs:37": {
    "fn_name": "static fn tower::util::map_err::{impl#10}::poll<tower::timeout::future::ResponseFuture<core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output=core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>> + core::marker::Send), alloc::alloc::Global>>>, reqwest::connect::{impl#1}::build::{closure_env#1}>(core::pin::Pin<&mut tower::util::map_err::MapErrFuture<tower::timeout::future::ResponseFuture<core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output=core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>> + core::marker::Send), alloc::alloc::Global>>>, reqwest::connect::{impl#1}::build::{closure_env#1}>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-0.5.2/src/timeout/future.rs:38": {
    "fn_name": "static fn tower::timeout::future::{impl#1}::poll<core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output=core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>> + core::marker::Send), alloc::alloc::Global>>, reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>(core::pin::Pin<&mut tower::timeout::future::ResponseFuture<core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output=core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>> + core::marker::Send), alloc::alloc::Global>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-0.5.2/src/timeout/mod.rs:57": {
    "fn_name": "static fn tower::timeout::{impl#1}::poll_ready<tower::util::boxed_clone_sync::BoxCloneSyncService<reqwest::connect::sealed::Unnameable, reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>, reqwest::connect::sealed::Unnameable>(*mut tower::timeout::Timeout<tower::util::boxed_clone_sync::BoxCloneSyncService<reqwest::connect::sealed::Unnameable, reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-0.5.2/src/util/boxed_clone_sync.rs:56": {
    "fn_name": "static fn tower::util::boxed_clone_sync::{impl#1}::poll_ready<reqwest::connect::sealed::Unnameable, reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>(*mut tower::util::boxed_clone_sync::BoxCloneSyncService<reqwest::connect::sealed::Unnameable, reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-0.5.2/src/util/map_err.rs:69": {
    "fn_name": "static fn tower::util::map_err::{impl#2}::poll_ready<tower::util::boxed_clone_sync::BoxCloneSyncService<reqwest::connect::sealed::Unnameable, reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>, reqwest::connect::{impl#1}::build::{closure_env#2}, reqwest::connect::sealed::Unnameable, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>(*mut tower::util::map_err::MapErr<tower::util::boxed_clone_sync::BoxCloneSyncService<reqwest::connect::sealed::Unnameable, reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>, reqwest::connect::{impl#1}::build::{closure_env#2}>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-0.5.2/src/util/map_future.rs:60": {
    "fn_name": "static fn tower::util::map_future::{impl#1}::poll_ready<reqwest::connect::sealed::Unnameable, tower::util::map_request::MapRequest<reqwest::connect::ConnectorService, reqwest::connect::{impl#1}::build::{closure_env#0}>, tower::util::boxed_clone_sync::{impl#0}::new::{closure_env#0}<reqwest::connect::sealed::Unnameable, reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>, tower::util::map_request::MapRequest<reqwest::connect::ConnectorService, reqwest::connect::{impl#1}::build::{closure_env#0}>>, reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>, core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output=core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>> + core::marker::Send), alloc::alloc::Global>>>(*mut tower::util::map_future::MapFuture<tower::util::map_request::MapRequest<reqwest::connect::ConnectorService, reqwest::connect::{impl#1}::build::{closure_env#0}>, tower::util::boxed_clone_sync::{impl#0}::new::{closure_env#0}<reqwest::connect::sealed::Unnameable, reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>, tower::util::map_request::MapRequest<reqwest::connect::ConnectorService, reqwest::connect::{impl#1}::build::{closure_env#0}>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-0.5.2/src/util/map_request.rs:53": {
    "fn_name": "static fn tower::util::map_request::{impl#2}::poll_ready<reqwest::connect::ConnectorService, reqwest::connect::{impl#1}::build::{closure_env#0}, reqwest::connect::sealed::Unnameable, http::uri::Uri>(*mut tower::util::map_request::MapRequest<reqwest::connect::ConnectorService, reqwest::connect::{impl#1}::build::{closure_env#0}>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-0.5.2/src/util/oneshot.rs:87": {
    "fn_name": "static fn tower::util::oneshot::{impl#3}::poll<reqwest::async_impl::client::HyperService, http::request::Request<reqwest::async_impl::body::Body>>(core::pin::Pin<&mut tower::util::oneshot::Oneshot<reqwest::async_impl::client::HyperService, http::request::Request<reqwest::async_impl::body::Body>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<http::response::Response<hyper::body::incoming::Incoming>, reqwest::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-http-0.6.6/src/follow_redirect/mod.rs:257": {
    "fn_name": "static fn tower_http::follow_redirect::{impl#6}::poll<reqwest::async_impl::client::HyperService, reqwest::async_impl::body::Body, hyper::body::incoming::Incoming, reqwest::redirect::TowerRedirectPolicy>(core::pin::Pin<&mut tower_http::follow_redirect::ResponseFuture<reqwest::async_impl::client::HyperService, reqwest::async_impl::body::Body, reqwest::redirect::TowerRedirectPolicy>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<http::response::Response<hyper::body::incoming::Incoming>, reqwest::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/tower-service-0.3.3/src/lib.rs:383": {
    "fn_name": "static fn tower_service::{impl#1}::poll_ready<(dyn tower::util::boxed_clone_sync::CloneService<reqwest::connect::sealed::Unnameable, Response=reqwest::connect::sealed::Conn, Error=alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>, Future=core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output=core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>> + core::marker::Send), alloc::alloc::Global>>> + core::marker::Send + core::marker::Sync), reqwest::connect::sealed::Unnameable>(*mut alloc::boxed::Box<(dyn tower::util::boxed_clone_sync::CloneService<reqwest::connect::sealed::Unnameable, Response=reqwest::connect::sealed::Conn, Error=alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>, Future=core::pin::Pin<alloc::boxed::Box<(dyn core::future::future::Future<Output=core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>> + core::marker::Send), alloc::alloc::Global>>> + core::marker::Send + core::marker::Sync), alloc::alloc::Global>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.rustup/toolchains/nightly-2025-04-22-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/future.rs:111": {
    "fn_name": "static fn core::future::future::{impl#0}::poll<tokio::sync::oneshot::Receiver<()>>(core::pin::Pin<&mut &mut tokio::sync::oneshot::Receiver<()>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), tokio::sync::oneshot::error::RecvError>>",
    "async_backtrace": false
  },
  "/home/iristseng/.rustup/toolchains/nightly-2025-04-22-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/future.rs:123": {
    "fn_name": "static fn core::future::future::{impl#1}::poll<alloc::boxed::Box<tokio_test_project::main::{async_block_env#0}, alloc::alloc::Global>>(core::pin::Pin<&mut core::pin::Pin<alloc::boxed::Box<tokio_test_project::main::{async_block_env#0}, alloc::alloc::Global>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), alloc::boxed::Box<dyn core::error::Error, alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.rustup/toolchains/nightly-2025-04-22-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/poll_fn.rs:149": {
    "fn_name": "static fn core::future::poll_fn::{impl#2}::poll<core::result::Result<tokio::runtime::io::driver::ReadyEvent, std::io::error::Error>, tokio::net::tcp::stream::{impl#0}::connect_mio::{async_fn#0}::{closure_env#0}>(core::pin::Pin<&mut core::future::poll_fn::PollFn<tokio::net::tcp::stream::{impl#0}::connect_mio::{async_fn#0}::{closure_env#0}>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<tokio::runtime::io::driver::ReadyEvent, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.rustup/toolchains/nightly-2025-04-22-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/future/ready.rs:22": {
    "fn_name": "static fn core::future::ready::{impl#1}::poll<core::result::Result<alloc::boxed::Box<(dyn core::iter::traits::iterator::Iterator<Item=core::net::socket_addr::SocketAddr> + core::marker::Send), alloc::alloc::Global>, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>(core::pin::Pin<&mut core::future::ready::Ready<core::result::Result<alloc::boxed::Box<(dyn core::iter::traits::iterator::Iterator<Item=core::net::socket_addr::SocketAddr> + core::marker::Send), alloc::alloc::Global>, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<alloc::boxed::Box<(dyn core::iter::traits::iterator::Iterator<Item=core::net::socket_addr::SocketAddr> + core::marker::Send), alloc::alloc::Global>, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.rustup/toolchains/nightly-2025-04-22-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/panic/unwind_safe.rs:271": {
    "fn_name": "static fn core::panic::unwind_safe::{impl#23}::call_once<core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::connect::dns::SocketAddrs, std::io::error::Error>>, tokio::runtime::task::harness::poll_future::{closure_env#0}<tokio::runtime::blocking::task::BlockingTask<hyper_util::client::legacy::connect::dns::{impl#7}::call::{closure_env#0}>, tokio::runtime::blocking::schedule::BlockingSchedule>>(core::panic::unwind_safe::AssertUnwindSafe<tokio::runtime::task::harness::poll_future::{closure_env#0}<tokio::runtime::blocking::task::BlockingTask<hyper_util::client::legacy::connect::dns::{impl#7}::call::{closure_env#0}>, tokio::runtime::blocking::schedule::BlockingSchedule>>, ())",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::connect::dns::SocketAddrs, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.rustup/toolchains/nightly-2025-04-22-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/result.rs:1439": {
    "fn_name": "static fn core::result::Result<core::task::poll::Poll<tokio::task::coop::RestoreOnPending>, std::thread::local::AccessError>::unwrap_or<core::task::poll::Poll<tokio::task::coop::RestoreOnPending>, std::thread::local::AccessError>(core::result::Result<core::task::poll::Poll<tokio::task::coop::RestoreOnPending>, std::thread::local::AccessError>, core::task::poll::Poll<tokio::task::coop::RestoreOnPending>)",
    "return_type": "core::task::poll::Poll<tokio::task::coop::RestoreOnPending>",
    "async_backtrace": false
  },
  "/home/iristseng/.rustup/toolchains/nightly-2025-04-22-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:49": {
    "fn_name": "static fn core::task::poll::Poll<core::result::Result<core::result::Result<hyper_util::client::legacy::connect::dns::SocketAddrs, std::io::error::Error>, tokio::runtime::task::error::JoinError>>::map<core::result::Result<core::result::Result<hyper_util::client::legacy::connect::dns::SocketAddrs, std::io::error::Error>, tokio::runtime::task::error::JoinError>, core::result::Result<hyper_util::client::legacy::connect::dns::GaiAddrs, std::io::error::Error>, hyper_util::client::legacy::connect::dns::{impl#9}::poll::{closure_env#0}>(core::task::poll::Poll<core::result::Result<core::result::Result<hyper_util::client::legacy::connect::dns::SocketAddrs, std::io::error::Error>, tokio::runtime::task::error::JoinError>>, hyper_util::client::legacy::connect::dns::{impl#9}::poll::{closure_env#0})",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::connect::dns::GaiAddrs, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.rustup/toolchains/nightly-2025-04-22-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:204": {
    "fn_name": "static fn core::task::poll::Poll<core::option::Option<core::result::Result<usize, h2::codec::error::UserError>>>::map_err<usize, h2::codec::error::UserError, h2::error::Error, fn(h2::codec::error::UserError) -> h2::error::Error>(core::task::poll::Poll<core::option::Option<core::result::Result<usize, h2::codec::error::UserError>>>, *mut fn (h2::codec::error::UserError) -> h2::error::Error)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<usize, h2::error::Error>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.rustup/toolchains/nightly-2025-04-22-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:174": {
    "fn_name": "static fn core::task::poll::Poll<core::option::Option<core::result::Result<u32, h2::codec::error::UserError>>>::map_ok<u32, h2::codec::error::UserError, usize, h2::share::{impl#1}::poll_capacity::{closure_env#0}<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>(core::task::poll::Poll<core::option::Option<core::result::Result<u32, h2::codec::error::UserError>>>, h2::share::{impl#1}::poll_capacity::{closure_env#0}<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<usize, h2::codec::error::UserError>>>",
    "async_backtrace": false
  },
  "/home/iristseng/.rustup/toolchains/nightly-2025-04-22-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:145": {
    "fn_name": "static fn core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>::map_err<usize, std::io::error::Error, std::io::error::Error, tokio_util::codec::framed_impl::{impl#8}::poll_next::{closure_env#2}<h2::codec::framed_write::FramedWrite<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>, tokio_util::codec::length_delimited::LengthDelimitedCodec, tokio_util::codec::framed_impl::ReadFrame>>(core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>, tokio_util::codec::framed_impl::{impl#8}::poll_next::{closure_env#2}<h2::codec::framed_write::FramedWrite<hyper::common::io::compat::Compat<reqwest::connect::sealed::Conn>, h2::proto::streams::prioritize::Prioritized<hyper::proto::h2::SendBuf<bytes::bytes::Bytes>>>, tokio_util::codec::length_delimited::LengthDelimitedCodec, tokio_util::codec::framed_impl::ReadFrame>)",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.rustup/toolchains/nightly-2025-04-22-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:117": {
    "fn_name": "static fn core::task::poll::Poll<core::result::Result<bytes::bytes::Bytes, std::io::error::Error>>::map_ok<bytes::bytes::Bytes, std::io::error::Error, http_body::frame::Frame<bytes::bytes::Bytes>, hyper::proto::h1::decode::{impl#0}::decode::{closure_env#0}<hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>>>(core::task::poll::Poll<core::result::Result<bytes::bytes::Bytes, std::io::error::Error>>, hyper::proto::h1::decode::{impl#0}::decode::{closure_env#0}<hyper::proto::h1::io::Buffered<reqwest::connect::sealed::Conn, hyper::proto::h1::encode::EncodedBuf<bytes::bytes::Bytes>>>)",
    "return_type": "core::task::poll::Poll<core::result::Result<http_body::frame::Frame<bytes::bytes::Bytes>, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.rustup/toolchains/nightly-2025-04-22-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:255": {
    "fn_name": "static fn core::task::poll::{impl#5}::from_residual<usize, std::io::error::Error, std::io::error::Error>(core::result::Result<core::convert::Infallible, std::io::error::Error>)",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "/home/iristseng/.rustup/toolchains/nightly-2025-04-22-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/task/poll.rs:288": {
    "fn_name": "static fn core::task::poll::{impl#7}::from_residual<http_body::frame::Frame<bytes::bytes::Bytes>, hyper::error::Error, hyper::error::Error>(core::result::Result<core::convert::Infallible, hyper::error::Error>)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<http_body::frame::Frame<bytes::bytes::Bytes>, hyper::error::Error>>>",
    "async_backtrace": false
  },
  "src/async_impl/body.rs:261": {
    "fn_name": "fn reqwest::async_impl::body::{impl#8}::poll_frame(core::pin::Pin<&mut reqwest::async_impl::body::Body>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<http_body::frame::Frame<bytes::bytes::Bytes>, reqwest::error::Error>>>",
    "async_backtrace": false
  },
  "src/async_impl/body.rs:354": {
    "fn_name": "static fn reqwest::async_impl::body::{impl#10}::poll_frame<http_body_util::combinators::box_body::BoxBody<bytes::bytes::Bytes, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>(core::pin::Pin<&mut reqwest::async_impl::body::ReadTimeoutBody<http_body_util::combinators::box_body::BoxBody<bytes::bytes::Bytes, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<http_body::frame::Frame<bytes::bytes::Bytes>, reqwest::error::Error>>>",
    "async_backtrace": false
  },
  "src/async_impl/body.rs:321": {
    "fn_name": "static fn reqwest::async_impl::body::{impl#9}::poll_frame<http_body_util::combinators::map_err::MapErr<reqwest::async_impl::body::ReadTimeoutBody<http_body_util::combinators::box_body::BoxBody<bytes::bytes::Bytes, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>, fn(reqwest::error::Error) -> alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>(core::pin::Pin<&mut reqwest::async_impl::body::TotalTimeoutBody<http_body_util::combinators::map_err::MapErr<reqwest::async_impl::body::ReadTimeoutBody<http_body_util::combinators::box_body::BoxBody<bytes::bytes::Bytes, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>, fn(reqwest::error::Error) -> alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<http_body::frame::Frame<bytes::bytes::Bytes>, reqwest::error::Error>>>",
    "async_backtrace": false
  },
  "src/async_impl/client.rs:110": {
    "fn_name": "fn reqwest::async_impl::client::{impl#0}::poll_ready(*mut reqwest::async_impl::client::HyperService, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), reqwest::error::Error>>",
    "async_backtrace": false
  },
  "src/async_impl/client.rs:2979": {
    "fn_name": "fn reqwest::async_impl::client::{impl#14}::poll(core::pin::Pin<&mut reqwest::async_impl::client::Pending>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<reqwest::async_impl::response::Response, reqwest::error::Error>>",
    "async_backtrace": false
  },
  "src/async_impl/client.rs:2993": {
    "fn_name": "fn reqwest::async_impl::client::{impl#15}::poll(core::pin::Pin<&mut reqwest::async_impl::client::PendingRequest>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<reqwest::async_impl::response::Response, reqwest::error::Error>>",
    "async_backtrace": false
  },
  "src/async_impl/client.rs:118": {
    "fn_name": "static fn reqwest::async_impl::client::{impl#0}::call::{async_block#0}(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<http::response::Response<hyper::body::incoming::Incoming>, reqwest::error::Error>>",
    "async_backtrace": false
  },
  "src/async_impl/decoder.rs:348": {
    "fn_name": "fn reqwest::async_impl::decoder::{impl#3}::poll_frame(core::pin::Pin<&mut reqwest::async_impl::decoder::Decoder>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<http_body::frame::Frame<bytes::bytes::Bytes>, reqwest::error::Error>>>",
    "async_backtrace": false
  },
  "src/body/incoming.rs:352": {
    "fn_name": "fn hyper::body::incoming::Sender::poll_ready(*mut hyper::body::incoming::Sender, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "src/body/incoming.rs:192": {
    "fn_name": "fn hyper::body::incoming::{impl#1}::poll_frame(core::pin::Pin<&mut hyper::body::incoming::Incoming>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<http_body::frame::Frame<bytes::bytes::Bytes>, hyper::error::Error>>>",
    "async_backtrace": false
  },
  "src/body/incoming.rs:360": {
    "fn_name": "static fn hyper::body::incoming::Sender::poll_want(*mut hyper::body::incoming::Sender, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), hyper::error::Error>>",
    "async_backtrace": false
  },
  "src/client.rs:1471": {
    "fn_name": "fn h2::client::{impl#9}::poll(core::pin::Pin<&mut h2::client::ResponseFuture>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<http::response::Response<h2::share::RecvStream>, h2::error::Error>>",
    "async_backtrace": false
  },
  "src/client/legacy/client.rs:758": {
    "fn_name": "fn hyper_util::client::legacy::client::{impl#8}::poll(core::pin::Pin<&mut hyper_util::client::legacy::client::ResponseFuture>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<http::response::Response<hyper::body::incoming::Incoming>, hyper_util::client::legacy::client::Error>>",
    "async_backtrace": false
  },
  "src/client/legacy/connect/dns.rs:138": {
    "fn_name": "fn hyper_util::client::legacy::connect::dns::{impl#9}::poll(core::pin::Pin<&mut hyper_util::client::legacy::connect::dns::GaiFuture>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<hyper_util::client::legacy::connect::dns::GaiAddrs, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/connect.rs:964": {
    "fn_name": "fn reqwest::connect::sealed::{impl#1}::poll_read(core::pin::Pin<&mut reqwest::connect::sealed::Conn>, *mut core::task::wake::Context, hyper::rt::io::ReadBufCursor)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/connect.rs:997": {
    "fn_name": "fn reqwest::connect::sealed::{impl#2}::poll_flush(core::pin::Pin<&mut reqwest::connect::sealed::Conn>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/connect.rs:1002": {
    "fn_name": "fn reqwest::connect::sealed::{impl#2}::poll_shutdown(core::pin::Pin<&mut reqwest::connect::sealed::Conn>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/connect.rs:975": {
    "fn_name": "fn reqwest::connect::sealed::{impl#2}::poll_write(core::pin::Pin<&mut reqwest::connect::sealed::Conn>, *mut core::task::wake::Context, &[u8])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/connect.rs:984": {
    "fn_name": "fn reqwest::connect::sealed::{impl#2}::poll_write_vectored(core::pin::Pin<&mut reqwest::connect::sealed::Conn>, *mut core::task::wake::Context, &[std::io::IoSlice])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/connect.rs:50": {
    "fn_name": "fn reqwest::connect::{impl#0}::poll_ready(*mut reqwest::connect::Connector, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "src/connect.rs:784": {
    "fn_name": "fn reqwest::connect::{impl#4}::poll_ready(*mut reqwest::connect::ConnectorService, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "src/connect.rs:1075": {
    "fn_name": "static fn reqwest::connect::native_tls_conn::{impl#2}::poll_read<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(core::pin::Pin<&mut reqwest::connect::native_tls_conn::NativeTlsConn<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>, *mut core::task::wake::Context, hyper::rt::io::ReadBufCursor)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/connect.rs:1108": {
    "fn_name": "static fn reqwest::connect::native_tls_conn::{impl#3}::poll_flush<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(core::pin::Pin<&mut reqwest::connect::native_tls_conn::NativeTlsConn<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/connect.rs:1116": {
    "fn_name": "static fn reqwest::connect::native_tls_conn::{impl#3}::poll_shutdown<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(core::pin::Pin<&mut reqwest::connect::native_tls_conn::NativeTlsConn<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/connect.rs:1086": {
    "fn_name": "static fn reqwest::connect::native_tls_conn::{impl#3}::poll_write<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(core::pin::Pin<&mut reqwest::connect::native_tls_conn::NativeTlsConn<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>, *mut core::task::wake::Context, &[u8])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/connect.rs:1095": {
    "fn_name": "static fn reqwest::connect::native_tls_conn::{impl#3}::poll_write_vectored<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>(core::pin::Pin<&mut reqwest::connect::native_tls_conn::NativeTlsConn<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>, *mut core::task::wake::Context, &[std::io::IoSlice])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/connect.rs:1405": {
    "fn_name": "static fn reqwest::connect::verbose::{impl#2}::poll_read<reqwest::connect::native_tls_conn::NativeTlsConn<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>(core::pin::Pin<&mut reqwest::connect::verbose::Verbose<reqwest::connect::native_tls_conn::NativeTlsConn<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>>, *mut core::task::wake::Context, hyper::rt::io::ReadBufCursor)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/connect.rs:1470": {
    "fn_name": "static fn reqwest::connect::verbose::{impl#3}::poll_flush<reqwest::connect::native_tls_conn::NativeTlsConn<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>(core::pin::Pin<&mut reqwest::connect::verbose::Verbose<reqwest::connect::native_tls_conn::NativeTlsConn<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/connect.rs:1477": {
    "fn_name": "static fn reqwest::connect::verbose::{impl#3}::poll_shutdown<reqwest::connect::native_tls_conn::NativeTlsConn<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>(core::pin::Pin<&mut reqwest::connect::verbose::Verbose<reqwest::connect::native_tls_conn::NativeTlsConn<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/connect.rs:1432": {
    "fn_name": "static fn reqwest::connect::verbose::{impl#3}::poll_write<reqwest::connect::native_tls_conn::NativeTlsConn<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>(core::pin::Pin<&mut reqwest::connect::verbose::Verbose<reqwest::connect::native_tls_conn::NativeTlsConn<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>>, *mut core::task::wake::Context, &[u8])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/connect.rs:1447": {
    "fn_name": "static fn reqwest::connect::verbose::{impl#3}::poll_write_vectored<reqwest::connect::native_tls_conn::NativeTlsConn<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>(core::pin::Pin<&mut reqwest::connect::verbose::Verbose<reqwest::connect::native_tls_conn::NativeTlsConn<hyper_util::rt::tokio::TokioIo<hyper_util::rt::tokio::TokioIo<tokio::net::tcp::stream::TcpStream>>>>>, *mut core::task::wake::Context, &[std::io::IoSlice])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/connect.rs:767": {
    "fn_name": "static fn reqwest::connect::with_timeout::{async_fn#0}<reqwest::connect::sealed::Conn, reqwest::connect::{impl#3}::connect_with_maybe_proxy::{async_fn_env#0}>(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "src/connect.rs:652": {
    "fn_name": "static fn reqwest::connect::{impl#3}::connect_via_proxy::{async_fn#0}(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "src/connect.rs:567": {
    "fn_name": "static fn reqwest::connect::{impl#3}::connect_with_maybe_proxy::{async_fn#0}(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<reqwest::connect::sealed::Conn, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "src/dns/gai.rs:25": {
    "fn_name": "static fn reqwest::dns::gai::{impl#2}::resolve::{async_block#0}(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<alloc::boxed::Box<(dyn core::iter::traits::iterator::Iterator<Item=core::net::socket_addr::SocketAddr> + core::marker::Send), alloc::alloc::Global>, alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "src/dns/resolve.rs:108": {
    "fn_name": "fn reqwest::dns::resolve::{impl#3}::poll_ready(*mut reqwest::dns::resolve::DynResolver, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), alloc::boxed::Box<(dyn core::error::Error + core::marker::Send + core::marker::Sync), alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "src/io/poll_evented.rs:169": {
    "fn_name": "static fn tokio::io::poll_evented::PollEvented<mio::net::tcp::stream::TcpStream>::poll_read<mio::net::tcp::stream::TcpStream>(*mut tokio::io::poll_evented::PollEvented<mio::net::tcp::stream::TcpStream>, *mut core::task::wake::Context, *mut tokio::io::read_buf::ReadBuf)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/io/poll_evented.rs:236": {
    "fn_name": "static fn tokio::io::poll_evented::PollEvented<mio::net::tcp::stream::TcpStream>::poll_write<mio::net::tcp::stream::TcpStream>(*mut tokio::io::poll_evented::PollEvented<mio::net::tcp::stream::TcpStream>, *mut core::task::wake::Context, &[u8])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/io/poll_evented.rs:266": {
    "fn_name": "static fn tokio::io::poll_evented::PollEvented<mio::net::tcp::stream::TcpStream>::poll_write_vectored<mio::net::tcp::stream::TcpStream>(*mut tokio::io::poll_evented::PollEvented<mio::net::tcp::stream::TcpStream>, *mut core::task::wake::Context, &[std::io::IoSlice])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/lib.rs:192": {
    "fn_name": "fn want::Giver::poll_want(*mut want::Giver, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), want::Closed>>",
    "async_backtrace": false
  },
  "src/main.rs:3": {
    "fn_name": "static fn tokio_test_project::main::{async_block#0}(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), alloc::boxed::Box<dyn core::error::Error, alloc::alloc::Global>>>",
    "async_backtrace": false
  },
  "src/net/tcp/stream.rs:1342": {
    "fn_name": "fn tokio::net::tcp::stream::{impl#2}::poll_read(core::pin::Pin<&mut tokio::net::tcp::stream::TcpStream>, *mut core::task::wake::Context, *mut tokio::io::read_buf::ReadBuf)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/net/tcp/stream.rs:1378": {
    "fn_name": "fn tokio::net::tcp::stream::{impl#3}::poll_shutdown(core::pin::Pin<&mut tokio::net::tcp::stream::TcpStream>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/net/tcp/stream.rs:1352": {
    "fn_name": "fn tokio::net::tcp::stream::{impl#3}::poll_write(core::pin::Pin<&mut tokio::net::tcp::stream::TcpStream>, *mut core::task::wake::Context, &[u8])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/net/tcp/stream.rs:1360": {
    "fn_name": "fn tokio::net::tcp::stream::{impl#3}::poll_write_vectored(core::pin::Pin<&mut tokio::net::tcp::stream::TcpStream>, *mut core::task::wake::Context, &[std::io::IoSlice])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/net/tcp/stream.rs:1301": {
    "fn_name": "static fn tokio::net::tcp::stream::TcpStream::poll_read_priv(*mut tokio::net::tcp::stream::TcpStream, *mut core::task::wake::Context, *mut tokio::io::read_buf::ReadBuf)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/net/tcp/stream.rs:1310": {
    "fn_name": "static fn tokio::net::tcp::stream::TcpStream::poll_write_priv(*mut tokio::net::tcp::stream::TcpStream, *mut core::task::wake::Context, &[u8])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/net/tcp/stream.rs:1318": {
    "fn_name": "static fn tokio::net::tcp::stream::TcpStream::poll_write_vectored_priv(*mut tokio::net::tcp::stream::TcpStream, *mut core::task::wake::Context, &[std::io::IoSlice])",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/proto/h2/ping.rs:260": {
    "fn_name": "fn hyper::proto::h2::ping::Ponger::poll(*mut hyper::proto::h2::ping::Ponger, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<hyper::proto::h2::ping::Ponged>",
    "async_backtrace": false
  },
  "src/proto/ping_pong.rs:235": {
    "fn_name": "static fn h2::proto::ping_pong::UserPings::poll_pong(*mut h2::proto::ping_pong::UserPings, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), h2::proto::error::Error>>",
    "async_backtrace": false
  },
  "src/proto/streams/recv.rs:1107": {
    "fn_name": "static fn h2::proto::streams::recv::Recv::poll_data(*mut h2::proto::streams::recv::Recv, *mut core::task::wake::Context, *mut h2::proto::streams::stream::Stream)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<bytes::bytes::Bytes, h2::proto::error::Error>>>",
    "async_backtrace": false
  },
  "src/proto/streams/recv.rs:320": {
    "fn_name": "static fn h2::proto::streams::recv::Recv::poll_response(*mut h2::proto::streams::recv::Recv, *mut core::task::wake::Context, *mut h2::proto::streams::store::Ptr)",
    "return_type": "core::task::poll::Poll<core::result::Result<http::response::Response<()>, h2::proto::error::Error>>",
    "async_backtrace": false
  },
  "src/proto/streams/recv.rs:1135": {
    "fn_name": "static fn h2::proto::streams::recv::Recv::poll_trailers(*mut h2::proto::streams::recv::Recv, *mut core::task::wake::Context, *mut h2::proto::streams::stream::Stream)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<http::header::map::HeaderMap<http::header::value::HeaderValue>, h2::proto::error::Error>>>",
    "async_backtrace": false
  },
  "src/proto/streams/recv.rs:1152": {
    "fn_name": "static fn h2::proto::streams::recv::Recv::schedule_recv<http::header::map::HeaderMap<http::header::value::HeaderValue>>(*mut h2::proto::streams::recv::Recv, *mut core::task::wake::Context, *mut h2::proto::streams::stream::Stream)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<http::header::map::HeaderMap<http::header::value::HeaderValue>, h2::proto::error::Error>>>",
    "async_backtrace": false
  },
  "src/proto/streams/send.rs:320": {
    "fn_name": "fn h2::proto::streams::send::Send::poll_capacity(*mut h2::proto::streams::send::Send, *mut core::task::wake::Context, *mut h2::proto::streams::store::Ptr)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<u32, h2::codec::error::UserError>>>",
    "async_backtrace": false
  },
  "src/proto/streams/send.rs:344": {
    "fn_name": "fn h2::proto::streams::send::Send::poll_reset(*mut h2::proto::streams::send::Send, *mut core::task::wake::Context, *mut h2::proto::streams::stream::Stream, h2::proto::streams::send::PollReset)",
    "return_type": "core::task::poll::Poll<core::result::Result<h2::frame::reason::Reason, h2::error::Error>>",
    "async_backtrace": false
  },
  "src/proto/streams/streams.rs:1366": {
    "fn_name": "static fn h2::proto::streams::streams::OpaqueStreamRef::poll_data(*mut h2::proto::streams::streams::OpaqueStreamRef, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<bytes::bytes::Bytes, h2::proto::error::Error>>>",
    "async_backtrace": false
  },
  "src/proto/streams/streams.rs:1329": {
    "fn_name": "static fn h2::proto::streams::streams::OpaqueStreamRef::poll_response(*mut h2::proto::streams::streams::OpaqueStreamRef, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<http::response::Response<()>, h2::proto::error::Error>>",
    "async_backtrace": false
  },
  "src/proto/streams/streams.rs:1375": {
    "fn_name": "static fn h2::proto::streams::streams::OpaqueStreamRef::poll_trailers(*mut h2::proto::streams::streams::OpaqueStreamRef, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<http::header::map::HeaderMap<http::header::value::HeaderValue>, h2::proto::error::Error>>>",
    "async_backtrace": false
  },
  "src/rt/tokio.rs:310": {
    "fn_name": "fn hyper_util::rt::tokio::{impl#9}::poll(core::pin::Pin<&mut hyper_util::rt::tokio::TokioSleep>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "src/runtime/blocking/task.rs:27": {
    "fn_name": "static fn tokio::runtime::blocking::task::{impl#2}::poll<tokio::runtime::scheduler::multi_thread::worker::{impl#0}::launch::{closure_env#0}, ()>(core::pin::Pin<&mut tokio::runtime::blocking::task::BlockingTask<tokio::runtime::scheduler::multi_thread::worker::{impl#0}::launch::{closure_env#0}>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "src/runtime/context.rs:135": {
    "fn_name": "static fn tokio::runtime::context::budget::{closure#0}<core::task::poll::Poll<tokio::task::coop::RestoreOnPending>, tokio::task::coop::poll_proceed::{closure_env#0}>(*mut tokio::runtime::context::Context)",
    "return_type": "core::task::poll::Poll<tokio::task::coop::RestoreOnPending>",
    "async_backtrace": false
  },
  "src/runtime/context/blocking.rs:90": {
    "fn_name": "static fn tokio::runtime::context::blocking::{impl#0}::block_on_timeout::{closure#1}<&mut tokio::sync::oneshot::Receiver<()>>()",
    "return_type": "core::task::poll::Poll<core::result::Result<(), tokio::sync::oneshot::error::RecvError>>",
    "async_backtrace": false
  },
  "src/runtime/io/registration.rs:109": {
    "fn_name": "fn tokio::runtime::io::registration::Registration::poll_read_ready(*mut tokio::runtime::io::registration::Registration, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<tokio::runtime::io::driver::ReadyEvent, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/runtime/io/registration.rs:144": {
    "fn_name": "fn tokio::runtime::io::registration::Registration::poll_ready(*mut tokio::runtime::io::registration::Registration, *mut core::task::wake::Context, tokio::runtime::io::driver::Direction)",
    "return_type": "core::task::poll::Poll<core::result::Result<tokio::runtime::io::driver::ReadyEvent, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/runtime/io/registration.rs:115": {
    "fn_name": "fn tokio::runtime::io::registration::Registration::poll_write_ready(*mut tokio::runtime::io::registration::Registration, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<tokio::runtime::io::driver::ReadyEvent, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/runtime/io/registration.rs:162": {
    "fn_name": "static fn tokio::runtime::io::registration::Registration::poll_io<usize, tokio::io::poll_evented::{impl#6}::poll_write_vectored::{closure_env#0}<mio::net::tcp::stream::TcpStream>>(*mut tokio::runtime::io::registration::Registration, *mut core::task::wake::Context, tokio::runtime::io::driver::Direction, tokio::io::poll_evented::{impl#6}::poll_write_vectored::{closure_env#0}<mio::net::tcp::stream::TcpStream>)",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/runtime/io/registration.rs:132": {
    "fn_name": "static fn tokio::runtime::io::registration::Registration::poll_write_io<usize, tokio::io::poll_evented::{impl#6}::poll_write_vectored::{closure_env#0}<mio::net::tcp::stream::TcpStream>>(*mut tokio::runtime::io::registration::Registration, *mut core::task::wake::Context, tokio::io::poll_evented::{impl#6}::poll_write_vectored::{closure_env#0}<mio::net::tcp::stream::TcpStream>)",
    "return_type": "core::task::poll::Poll<core::result::Result<usize, std::io::error::Error>>",
    "async_backtrace": false
  },
  "src/runtime/io/scheduled_io.rs:305": {
    "fn_name": "static fn tokio::runtime::io::scheduled_io::ScheduledIo::poll_readiness(*mut tokio::runtime::io::scheduled_io::ScheduledIo, *mut core::task::wake::Context, tokio::runtime::io::driver::Direction)",
    "return_type": "core::task::poll::Poll<tokio::runtime::io::driver::ReadyEvent>",
    "async_backtrace": false
  },
  "src/runtime/park.rs:285": {
    "fn_name": "static fn tokio::runtime::park::{impl#4}::block_on::{closure#0}<&mut tokio::sync::oneshot::Receiver<()>>()",
    "return_type": "core::task::poll::Poll<core::result::Result<(), tokio::sync::oneshot::error::RecvError>>",
    "async_backtrace": false
  },
  "src/runtime/task/core.rs:352": {
    "fn_name": "static fn tokio::runtime::task::core::Core<tokio::runtime::blocking::task::BlockingTask<tokio::runtime::scheduler::multi_thread::worker::{impl#0}::launch::{closure_env#0}>, tokio::runtime::blocking::schedule::BlockingSchedule>::poll<tokio::runtime::blocking::task::BlockingTask<tokio::runtime::scheduler::multi_thread::worker::{impl#0}::launch::{closure_env#0}>, tokio::runtime::blocking::schedule::BlockingSchedule>(*mut tokio::runtime::task::core::Core<tokio::runtime::blocking::task::BlockingTask<tokio::runtime::scheduler::multi_thread::worker::{impl#0}::launch::{closure_env#0}>, tokio::runtime::blocking::schedule::BlockingSchedule>, core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "src/runtime/task/core.rs:354": {
    "fn_name": "static fn tokio::runtime::task::core::{impl#6}::poll::{closure#0}<tokio::runtime::blocking::task::BlockingTask<tokio::runtime::scheduler::multi_thread::worker::{impl#0}::launch::{closure_env#0}>, tokio::runtime::blocking::schedule::BlockingSchedule>(*mut tokio::runtime::task::core::Stage<tokio::runtime::blocking::task::BlockingTask<tokio::runtime::scheduler::multi_thread::worker::{impl#0}::launch::{closure_env#0}>>)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "src/runtime/task/harness.rs:523": {
    "fn_name": "static fn tokio::runtime::task::harness::poll_future::{closure#0}<tokio::runtime::blocking::task::BlockingTask<tokio::runtime::scheduler::multi_thread::worker::{impl#0}::launch::{closure_env#0}>, tokio::runtime::blocking::schedule::BlockingSchedule>()",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "src/runtime/task/harness.rs:521": {
    "fn_name": "static fn tokio::runtime::task::harness::poll_future<tokio::runtime::blocking::task::BlockingTask<tokio::runtime::scheduler::multi_thread::worker::{impl#0}::launch::{closure_env#0}>, tokio::runtime::blocking::schedule::BlockingSchedule>(*mut tokio::runtime::task::core::Core<tokio::runtime::blocking::task::BlockingTask<tokio::runtime::scheduler::multi_thread::worker::{impl#0}::launch::{closure_env#0}>, tokio::runtime::blocking::schedule::BlockingSchedule>, core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "src/runtime/time/entry.rs:142": {
    "fn_name": "static fn tokio::runtime::time::entry::StateCell::poll(*mut tokio::runtime::time::entry::StateCell, *mut core::task::wake::Waker)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), tokio::time::error::Error>>",
    "async_backtrace": false
  },
  "src/runtime/time/entry.rs:151": {
    "fn_name": "static fn tokio::runtime::time::entry::StateCell::read_state(*mut tokio::runtime::time::entry::StateCell)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), tokio::time::error::Error>>",
    "async_backtrace": false
  },
  "src/runtime/time/entry.rs:598": {
    "fn_name": "static fn tokio::runtime::time::entry::TimerEntry::poll_elapsed(core::pin::Pin<&mut tokio::runtime::time::entry::TimerEntry>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), tokio::time::error::Error>>",
    "async_backtrace": false
  },
  "src/share.rs:569": {
    "fn_name": "fn h2::share::PingPong::poll_pong(*mut h2::share::PingPong, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<h2::share::Pong, h2::error::Error>>",
    "async_backtrace": false
  },
  "src/share.rs:422": {
    "fn_name": "fn h2::share::RecvStream::poll_data(*mut h2::share::RecvStream, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::option::Option<core::result::Result<bytes::bytes::Bytes, h2::error::Error>>>",
    "async_backtrace": false
  },
  "src/share.rs:427": {
    "fn_name": "fn h2::share::RecvStream::poll_trailers(*mut h2::share::RecvStream, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<core::option::Option<http::header::map::HeaderMap<http::header::value::HeaderValue>>, h2::error::Error>>",
    "async_backtrace": false
  },
  "src/sync/notify.rs:1151": {
    "fn_name": "fn tokio::sync::notify::{impl#11}::poll(core::pin::Pin<&mut tokio::sync::notify::Notified>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "src/sync/notify.rs:934": {
    "fn_name": "static fn tokio::sync::notify::Notified::poll_notified(core::pin::Pin<&mut tokio::sync::notify::Notified>, core::option::Option<&core::task::wake::Waker>)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "src/sync/oneshot.rs:1285": {
    "fn_name": "static fn tokio::sync::oneshot::Inner<()>::poll_recv<()>(*mut tokio::sync::oneshot::Inner<()>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), tokio::sync::oneshot::error::RecvError>>",
    "async_backtrace": false
  },
  "src/sync/oneshot.rs:1241": {
    "fn_name": "static fn tokio::sync::oneshot::{impl#5}::poll<()>(core::pin::Pin<&mut tokio::sync::oneshot::Receiver<()>>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), tokio::sync::oneshot::error::RecvError>>",
    "async_backtrace": false
  },
  "src/task/coop/mod.rs:291": {
    "fn_name": "static fn tokio::task::coop::poll_proceed(*mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<tokio::task::coop::RestoreOnPending>",
    "async_backtrace": false
  },
  "src/task/coop/mod.rs:292": {
    "fn_name": "static fn tokio::task::coop::poll_proceed::{closure#0}(*mut core::cell::Cell<tokio::task::coop::Budget>)",
    "return_type": "core::task::poll::Poll<tokio::task::coop::RestoreOnPending>",
    "async_backtrace": false
  },
  "src/time/sleep.rs:439": {
    "fn_name": "fn tokio::time::sleep::{impl#1}::poll(core::pin::Pin<&mut tokio::time::sleep::Sleep>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<()>",
    "async_backtrace": false
  },
  "src/time/sleep.rs:399": {
    "fn_name": "static fn tokio::time::sleep::Sleep::poll_elapsed(core::pin::Pin<&mut tokio::time::sleep::Sleep>, *mut core::task::wake::Context)",
    "return_type": "core::task::poll::Poll<core::result::Result<(), tokio::time::error::Error>>",
    "async_backtrace": false
  }
}
